//
//  SessionDataManager.swift - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è –ë–ï–ó @MainActor
//  AI_Psycholog
//
//  –ö–†–ò–¢–ò–ß–ù–û: –£–ë–†–ê–ù @MainActor - —ç—Ç–æ –∏—Å—Ç–æ—á–Ω–∏–∫ Publishing changes –æ—à–∏–±–æ–∫!
//

import Foundation
import SwiftUI

// MARK: - Shared Session Model (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
struct SessionData: Identifiable, Codable {
    let id: Int
    let date: Date
    let moodLevel: MoodLevel
    let note: String
    
    enum CodingKeys: String, CodingKey {
        case id, date, moodLevel, note
    }
    
    init(id: Int, date: Date, moodLevel: MoodLevel, note: String = "") {
        self.id = id
        self.date = date
        self.moodLevel = moodLevel
        self.note = note
    }
    
    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        id = try container.decode(Int.self, forKey: .id)
        date = try container.decode(Date.self, forKey: .date)
        moodLevel = try container.decode(MoodLevel.self, forKey: .moodLevel)
        note = try container.decode(String.self, forKey: .note)
    }
    
    func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(date, forKey: .date)
        try container.encode(moodLevel, forKey: .moodLevel)
        try container.encode(note, forKey: .note)
    }
}

// MARK: - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô Session Data Manager –ë–ï–ó @MainActor
class SessionDataManager: ObservableObject {
    static let shared = SessionDataManager()
    
    @Published var sessions: [SessionData] = []
    @Published var isLoading = false
    @Published var error: String?
    
    private(set) var lastLoadTime: Date?
    private let cacheExpirationTime: TimeInterval = 300 // 5 –º–∏–Ω—É—Ç –∫–µ—à
    private var debugInfo: [String] = []
    
    private init() {
        print("üìä SessionDataManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ë–ï–ó @MainActor")
        addDebugInfo("üìä SessionDataManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    }
    
    // MARK: - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞
    func loadSessionsFromServer() {
        print("üìä üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞...")
        addDebugInfo("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–π")
        
        // –ö–†–ò–¢–ò–ß–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ DispatchQueue.main.async
        DispatchQueue.main.async {
            self.isLoading = true
            self.error = nil
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º APIManager
        APIManager.shared.getSessions { [weak self] result in
            DispatchQueue.main.async {
                guard let self = self else { return }
                
                self.isLoading = false
                
                switch result {
                case .success(let serverSessions):
                    let sessionCount = serverSessions.count
                    print("‚úÖ SessionDataManager: –£–°–ü–ï–®–ù–û –ø–æ–ª—É—á–µ–Ω–æ \(sessionCount) —Å–µ—Å—Å–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞")
                    self.addDebugInfo("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ \(sessionCount) —Å–µ—Å—Å–∏–π")
                    
                    if serverSessions.isEmpty {
                        print("‚ÑπÔ∏è –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–µ—Å—Å–∏–π —Å AI-–ø—Å–∏—Ö–æ–ª–æ–≥–æ–º")
                        self.addDebugInfo("‚ÑπÔ∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π")
                        self.checkAuthenticationStatus()
                    } else {
                        print("üìä –î–ï–¢–ê–õ–ò –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π:")
                        self.addDebugInfo("üìä –î–ï–¢–ê–õ–ò —Å–µ—Å—Å–∏–π:")
                        serverSessions.enumerated().forEach { index, session in
                            let logLine = "  \(index + 1). –°–µ—Å—Å–∏—è #\(session.id) - \(session.date) - \(session.moodLevel.title)"
                            print(logLine)
                            self.addDebugInfo(logLine)
                        }
                    }
                    
                    self.sessions = serverSessions.sorted { $0.date > $1.date }
                    self.lastLoadTime = Date()
                    self.error = nil
                    
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    NotificationCenter.default.post(name: .sessionDataUpdated, object: nil)
                    
                    print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                    self.addDebugInfo("‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
                    
                case .failure(let apiError):
                    print("‚ùå SessionDataManager: –û–®–ò–ë–ö–ê –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π")
                    print("‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: \(apiError)")
                    
                    self.addDebugInfo("‚ùå –û–®–ò–ë–ö–ê –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π")
                    self.addDebugInfo("‚ùå \(apiError.localizedDescription)")
                    
                    // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏
                    if apiError.localizedDescription.contains("–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è") ||
                       apiError.localizedDescription.contains("401") {
                        self.error = "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç"
                        self.addDebugInfo("üîê –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω")
                        self.checkAuthenticationStatus()
                    } else if apiError.localizedDescription.contains("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ") ||
                              apiError.localizedDescription.contains("Internet connection") {
                        self.error = "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É"
                        self.addDebugInfo("üì° –ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º")
                    } else if apiError.localizedDescription.contains("–≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è") ||
                              apiError.localizedDescription.contains("timed out") {
                        self.error = "–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
                        self.addDebugInfo("‚è∞ –¢–∞–π–º–∞—É—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                    } else {
                        self.error = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: \(apiError.localizedDescription)"
                        self.addDebugInfo("‚ùì –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ API")
                    }
                    
                    print("‚ÑπÔ∏è –ë–µ–∑ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                    self.addDebugInfo("‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –±–µ–∑ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞")
                }
                
                // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                NotificationCenter.default.post(name: .sessionDataUpdated, object: nil)
            }
        }
    }
    
    // MARK: - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    private func checkAuthenticationStatus() {
        addDebugInfo("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫—É–∫–∏
        if let url = URL(string: "https://w-psycholog.com") {
            let cookies = HTTPCookieStorage.shared.cookies(for: url) ?? []
            addDebugInfo("üç™ –ù–∞–π–¥–µ–Ω–æ –∫—É–∫–∏: \(cookies.count)")
            
            for cookie in cookies {
                addDebugInfo("   - \(cookie.name): \(cookie.value.prefix(10))...")
            }
            
            if cookies.isEmpty {
                addDebugInfo("‚ö†Ô∏è –ö—É–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if let credentials = KeychainManager.shared.getCredentials() {
            addDebugInfo("üîê –ù–∞–π–¥–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è: \(credentials.username)")
        } else {
            addDebugInfo("‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        }
    }
    
    // MARK: - Add New Session via API
    func addSession(moodLevel: MoodLevel, note: String = "") {
        print("üìä –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ API...")
        addDebugInfo("üìä –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é: \(moodLevel.title)")
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        APIManager.shared.addMoodRecord(moodLevel: moodLevel, note: note) { [weak self] (result: Result<Void, Error>) in
            DispatchQueue.main.async {
                switch result {
                case .success:
                    print("‚úÖ –ó–∞–ø–∏—Å—å —Å–µ—Å—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
                    self?.addDebugInfo("‚úÖ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
                    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                    self?.refreshData()
                    
                case .failure(let error):
                    print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: \(error)")
                    self?.addDebugInfo("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: \(error.localizedDescription)")
                    self?.error = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É."
                }
            }
        }
    }
    
    // MARK: - Create Session from Chat
    func createSessionFromChat(moodLevel: MoodLevel? = nil, note: String = "", completion: @escaping (Bool) -> Void) {
        print("üìä –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ —á–∞—Ç...")
        addDebugInfo("üìä –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ —á–∞—Ç")
        
        // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ API
        APIManager.shared.createSession { [weak self] result in
            DispatchQueue.main.async {
                switch result {
                case .success(let sessionInfo):
                    if sessionInfo.isNew {
                        // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
                        if let mood = moodLevel {
                            self?.addSession(moodLevel: mood, note: note)
                        }
                        print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è #\(sessionInfo.id ?? 0)")
                        self?.addDebugInfo("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è #\(sessionInfo.id ?? 0)")
                    } else {
                        print("‚ÑπÔ∏è –°–µ—Å—Å–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                        self?.addDebugInfo("‚ÑπÔ∏è –°–µ—Å—Å–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                        // –í—Å–µ —Ä–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                        self?.refreshData()
                    }
                    completion(true)
                    
                case .failure(let error):
                    print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: \(error)")
                    self?.addDebugInfo("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: \(error.localizedDescription)")
                    completion(false)
                }
            }
        }
    }
    
    // MARK: - Get Sessions for Profile View
    func getSessionsForProfile() -> [ProfileSession] {
        print("üìä –ó–∞–ø—Ä–æ—Å —Å–µ—Å—Å–∏–π –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è: \(sessions.count) —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
        addDebugInfo("üìä –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º \(sessions.count) —Å–µ—Å—Å–∏–π –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è")
        
        return sessions.map { session in
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º MoodLevel –≤ SessionStatus
            let status: ProfileSession.SessionStatus
            switch session.moodLevel.score {
            case 1, 2:
                status = .bad
            case 4, 5:
                status = .good
            default:
                status = .good // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ö–æ—Ä–æ—à–µ–µ
            }
            
            return ProfileSession(
                id: session.id,
                date: session.date,
                status: status
            )
        }.sorted { $0.date > $1.date }
    }
    
    // MARK: - Statistics
    func getAverageMoodScore() -> Double {
        guard !sessions.isEmpty else {
            print("üìä –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: 0 (–Ω–µ—Ç —Å–µ—Å—Å–∏–π)")
            return 0
        }
        let sum = sessions.reduce(0) { $0 + $1.moodLevel.score }
        let average = Double(sum) / Double(sessions.count)
        print("üìä –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ \(sessions.count) —Å–µ—Å—Å–∏—è–º: \(String(format: "%.1f", average))")
        return average
    }
    
    func getStreakDays() -> Int {
        guard !sessions.isEmpty else {
            print("üìä –î–Ω–µ–π –ø–æ–¥—Ä—è–¥: 0 (–Ω–µ—Ç —Å–µ—Å—Å–∏–π)")
            return 0
        }
        
        let calendar = Calendar.current
        let sortedSessions = sessions.sorted { $0.date > $1.date }
        
        var streak = 0
        var currentDate = calendar.startOfDay(for: Date())
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ –ø–æ –¥–Ω—è–º
        let sessionsByDay = Dictionary(grouping: sortedSessions) { session in
            calendar.startOfDay(for: session.date)
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω–µ–π
        while let _ = sessionsByDay[currentDate] {
            streak += 1
            currentDate = calendar.date(byAdding: .day, value: -1, to: currentDate) ?? currentDate
        }
        
        print("üìä –ü–æ–¥—Ä—è–¥ –¥–Ω–µ–π —Å —Å–µ—Å—Å–∏—è–º–∏: \(streak)")
        return streak
    }
    
    func getSessionsCount(for period: TimeFilter) -> Int {
        let calendar = Calendar.current
        let now = Date()
        
        let count = sessions.filter { session in
            switch period {
            case .week:
                return calendar.isDate(session.date, equalTo: now, toGranularity: .weekOfYear)
            case .month:
                return calendar.isDate(session.date, equalTo: now, toGranularity: .month)
            case .year:
                return calendar.isDate(session.date, equalTo: now, toGranularity: .year)
            case .all:
                return true
            }
        }.count
        
        print("üìä –°–µ—Å—Å–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥ \(period.title): \(count)")
        return count
    }
    
    func getSessionsThisMonth() -> Int {
        return getSessionsCount(for: .month)
    }
    
    // MARK: - Refresh Data
    func refreshData() {
        print("üîÑ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞")
        addDebugInfo("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
        
        DispatchQueue.main.async {
            self.lastLoadTime = nil // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–µ—à
            self.sessions.removeAll() // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            self.error = nil // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
        }
        
        loadSessionsFromServer()
    }
    
    // MARK: - Clear Data
    func clearLocalData() {
        DispatchQueue.main.async {
            self.sessions.removeAll()
            self.lastLoadTime = nil
            self.error = nil
            self.debugInfo.removeAll()
        }
        NotificationCenter.default.post(name: .sessionDataUpdated, object: nil)
        print("üóëÔ∏è –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–π –æ—á–∏—â–µ–Ω—ã")
    }
    
    // MARK: - Cache Management
    private func isCacheValid() -> Bool {
        guard let lastLoad = lastLoadTime else { return false }
        let isValid = Date().timeIntervalSince(lastLoad) < cacheExpirationTime
        print("üìä –ö–µ—à –≤–∞–ª–∏–¥–µ–Ω: \(isValid) (–ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞: \(lastLoad))")
        return isValid
    }
    
    func forceCacheRefresh() {
        print("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞")
        addDebugInfo("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞")
        DispatchQueue.main.async {
            self.lastLoadTime = nil
        }
        loadSessionsFromServer()
    }
    
    // MARK: - Auto-load on first access
    func ensureDataLoaded() {
        print("üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        addDebugInfo("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        
        let currentState = """
        üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:
           - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π: \(sessions.count)
           - –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è: \(isLoading)
           - –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞: \(lastLoadTime?.description ?? "–Ω–∏–∫–æ–≥–¥–∞")
           - –ö–µ—à –≤–∞–ª–∏–¥–µ–Ω: \(isCacheValid())
        """
        print(currentState)
        addDebugInfo(currentState)
        
        if sessions.isEmpty && !isLoading && lastLoadTime == nil {
            print("üìä ‚û°Ô∏è –ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π...")
            addDebugInfo("‚û°Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É")
            loadSessionsFromServer()
        } else if !isCacheValid() && !isLoading {
            print("üìä ‚û°Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –∫–µ—à–∞...")
            addDebugInfo("‚û°Ô∏è –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –∫–µ—à–∞")
            loadSessionsFromServer()
        } else {
            print("üìä ‚û°Ô∏è –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã, –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            addDebugInfo("‚û°Ô∏è –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
        }
    }
    
    // MARK: - Debug Methods
    private func addDebugInfo(_ info: String) {
        let timestamp = DateFormatter().string(from: Date())
        debugInfo.append("[\(timestamp)] \(info)")
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞
        if debugInfo.count > 100 {
            debugInfo.removeFirst(50)
        }
    }
    
    func printDebugInfo() {
        print("üìä === –ü–û–õ–ù–ê–Ø DEBUG INFO - Session Manager ===")
        print("üìä –í–µ—Ä—Å–∏—è: –ë–ï–ó @MainActor - Publishing changes –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
        print("üìä –í—Å–µ–≥–æ –†–ï–ê–õ–¨–ù–´–• —Å–µ—Å—Å–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞: \(sessions.count)")
        print("üìä –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≥—Ä—É–∑–∫–∏: \(lastLoadTime?.description ?? "–Ω–∏–∫–æ–≥–¥–∞")")
        print("üìä –û—à–∏–±–∫–∞: \(error ?? "–Ω–µ—Ç")")
        print("üìä –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è: \(isLoading)")
        print("üìä –ö–µ—à –≤–∞–ª–∏–¥–µ–Ω: \(isCacheValid())")
        print("üìä –°—Ä–æ–∫ –∫–µ—à–∞: \(cacheExpirationTime) —Å–µ–∫—É–Ω–¥")
        
        print("üìä")
        print("üìä –î–ï–¢–ê–õ–¨–ù–´–ô –õ–û–ì –û–ü–ï–†–ê–¶–ò–ô:")
        for info in debugInfo.suffix(20) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–ø–∏—Å–µ–π
            print("üìä \(info)")
        }
        
        print("üìä ==========================================")
    }
    
    // MARK: - TEST METHODS –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    #if DEBUG
    func addTestSession() {
        print("üß™ –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏...")
        addDebugInfo("üß™ –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é")
        let testSession = SessionData(
            id: Int.random(in: 1000...9999),
            date: Date(),
            moodLevel: .happy,
            note: "–¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"
        )
        
        DispatchQueue.main.async {
            self.sessions.append(testSession)
        }
        NotificationCenter.default.post(name: .sessionDataUpdated, object: nil)
        print("üß™ –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞: #\(testSession.id)")
        addDebugInfo("üß™ –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è #\(testSession.id) –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    }
    
    func clearTestData() {
        print("üß™ –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        addDebugInfo("üß™ –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
        DispatchQueue.main.async {
            self.sessions.removeAll { $0.note.contains("–¢–µ—Å—Ç–æ–≤–∞—è") }
        }
        NotificationCenter.default.post(name: .sessionDataUpdated, object: nil)
        print("üß™ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
    }
    
    func simulateNetworkError() {
        print("üß™ –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤—É—é –æ—à–∏–±–∫—É...")
        addDebugInfo("üß™ –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤—É—é –æ—à–∏–±–∫—É")
        DispatchQueue.main.async {
            self.isLoading = false
            self.error = "–°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"
        }
        NotificationCenter.default.post(name: .sessionDataUpdated, object: nil)
    }
    
    func simulateEmptyResponse() {
        print("üß™ –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞...")
        addDebugInfo("üß™ –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
        DispatchQueue.main.async {
            self.isLoading = false
            self.sessions.removeAll()
            self.error = nil
            self.lastLoadTime = Date()
        }
        NotificationCenter.default.post(name: .sessionDataUpdated, object: nil)
        print("üß™ –°–∏–º—É–ª—è—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    }
    #endif
}

// MARK: - Notification Name Extension (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
extension Notification.Name {
    static let sessionDataUpdated = Notification.Name("sessionDataUpdated")
}

// MARK: - ProfileSession Model –¥–ª—è ProfileView (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
struct ProfileSession: Identifiable {
    let id: Int
    let date: Date
    let status: SessionStatus
    
    enum SessionStatus: Int {
        case bad = 2
        case good = 4
        
        @ViewBuilder var image: some View {
            switch self {
            case .bad:
                ZStack {
                    Circle()
                        .fill(
                            LinearGradient(
                                gradient: Gradient(colors: [Color.blue.opacity(0.3), Color.blue.opacity(0.1)]),
                                startPoint: .topLeading,
                                endPoint: .bottomTrailing
                            )
                        )
                        .overlay(
                            Circle()
                                .stroke(Color.blue.opacity(0.3), lineWidth: 2)
                        )
                    
                    Image(systemName: "cloud.rain.fill")
                        .font(.title3)
                        .foregroundColor(.blue)
                }
                .frame(width: 40, height: 40)
            case .good:
                ZStack {
                    Circle()
                        .fill(
                            LinearGradient(
                                gradient: Gradient(colors: [Color.yellow.opacity(0.3), Color.orange.opacity(0.1)]),
                                startPoint: .topLeading,
                                endPoint: .bottomTrailing
                            )
                        )
                        .overlay(
                            Circle()
                                .stroke(Color.orange.opacity(0.3), lineWidth: 2)
                        )
                    
                    Image(systemName: "sun.max.fill")
                        .font(.title3)
                        .foregroundColor(.orange)
                }
                .frame(width: 40, height: 40)
            }
        }
        
        var icon: String {
            switch self {
            case .good: return "sun.max.fill"
            case .bad: return "cloud.rain.fill"
            }
        }
        
        var color: Color {
            switch self {
            case .good: return .orange
            case .bad: return .blue
            }
        }
        
        var description: String {
            switch self {
            case .good: return "–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è"
            case .bad: return "–ù—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
            }
        }
    }
}
