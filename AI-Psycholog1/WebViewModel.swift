//
//  WebViewModel.swift - –£–õ–£–ß–®–ï–ù–ù–´–ô —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–≤–æ–Ω–∫–æ–≤
//  AI_Psycholog
//
//  –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–≤–æ–Ω–∫–æ–≤ –∏ WebRTC
//

import Foundation
import WebKit
import Combine
import UIKit

class WebViewModel: ObservableObject {
    @Published var isLoading = false
    @Published var error: Error?
    
    private var webView: WKWebView?
    var messageHandlers: [String: ([String: Any]) -> Void] = [:]
    
    func setWebView(_ webView: WKWebView) {
        self.webView = webView
    }
    
    func evaluateJavaScript(_ script: String) {
        webView?.evaluateJavaScript(script) { _, error in
            if let error = error {
                print("JavaScript error: \(error)")
            }
        }
    }
        
    // –ù–û–í–´–ï –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–æ–≤
    private func handleCallMessage(data: [String: Any]) {
        print("üìû WebViewModel: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤–æ–Ω–∫–∞")
        print("üìû –î–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞: \(data)")
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ
        var phoneNumber: String?
        var callURL: String?
        
        if let phone = data["phone"] as? String, !phone.isEmpty {
            phoneNumber = phone
        }
        
        if let url = data["url"] as? String, !url.isEmpty {
            callURL = url
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º data –∞—Ç—Ä–∏–±—É—Ç—ã
        if let callData = data["data"] as? [String: Any] {
            if let dataPhone = callData["data-phone"] as? String {
                phoneNumber = dataPhone
            }
            if let dataCall = callData["data-call"] as? String {
                callURL = dataCall
            }
        }
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä –∏–∑ HTML
        if let buttonHTML = data["buttonHTML"] as? String {
            phoneNumber = extractPhoneFromHTML(buttonHTML) ?? phoneNumber
        }
        
        if let buttonText = data["buttonText"] as? String {
            phoneNumber = extractPhoneFromText(buttonText) ?? phoneNumber
        }
        
        print("üìû Extracted phone: \(phoneNumber ?? "none")")
        print("üìû Extracted URL: \(callURL ?? "none")")
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–≤–æ–Ω–æ–∫
        if let phone = phoneNumber {
            makePhoneCall(phoneNumber: phone)
        } else if let url = callURL {
            openExternalURL(urlString: url)
        } else {
            print("‚ùå WebViewModel: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–≤–æ–Ω–∫–∞")
            showCallError()
        }
    }
    
    private func handleSignedURL(data: [String: Any]) {
        print("üîó WebViewModel: –û–±—Ä–∞–±–æ—Ç–∫–∞ signed URL")
        
        guard let urlString = data["url"] as? String else {
            print("‚ùå WebViewModel: –ù–µ—Ç URL –≤ signed URL –¥–∞–Ω–Ω—ã—Ö")
            return
        }
        
        print("üîó Signed URL: \(urlString)")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∑–≤–æ–Ω–æ–∫ –∏–ª–∏ –æ–±—ã—á–Ω–∞—è —Å—Å—ã–ª–∫–∞
        if urlString.contains("call") || urlString.contains("webrtc") ||
           urlString.contains("meet") || urlString.contains("video") {
            print("üìû Detected call URL in signed URL")
            openCallURL(urlString)
        } else {
            openExternalURL(urlString: urlString)
        }
    }
    
    private func handleWindowOpenCall(data: [String: Any]) {
        print("ü™ü WebViewModel: –û–±—Ä–∞–±–æ—Ç–∫–∞ window.open –∑–≤–æ–Ω–∫–∞")
        
        if let urlString = data["url"] as? String {
            print("ü™ü Window.open URL: \(urlString)")
            openCallURL(urlString)
        }
    }
    
    private func handleWebRTCRequest(data: [String: Any]) {
        print("üìπ WebViewModel: WebRTC –∑–∞–ø—Ä–æ—Å")
        print("üìπ Constraints: \(data)")
        
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è WebRTC
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
    }
    
    private func handleExternalURL(data: [String: Any]) {
        guard let urlString = data["url"] as? String else { return }
        openExternalURL(urlString: urlString)
    }
    
    // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –º–µ—Ç–æ–¥—ã
    private func extractPhoneFromHTML(_ html: String) -> String? {
        // –ò—â–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ HTML –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
        let patterns = [
            "data-phone=\"([^\"]+)\"",
            "data-call=\"([^\"]+)\"",
            "href=\"tel:([^\"]+)\"",
            "onclick=\"[^\"]*call[^\"]*([+]?[0-9\\s\\-\\(\\)]{7,})"
        ]
        
        for pattern in patterns {
            if let regex = try? NSRegularExpression(pattern: pattern, options: .caseInsensitive) {
                let range = NSRange(html.startIndex..., in: html)
                if let match = regex.firstMatch(in: html, range: range) {
                    if match.numberOfRanges > 1 {
                        let phoneRange = match.range(at: 1)
                        if let swiftRange = Range(phoneRange, in: html) {
                            let phone = String(html[swiftRange])
                            print("üìû Extracted phone from HTML: \(phone)")
                            return phone
                        }
                    }
                }
            }
        }
        
        return nil
    }
    
    private func extractPhoneFromText(_ text: String) -> String? {
        // –ò—â–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ
        let phonePattern = "[+]?[0-9\\s\\-\\(\\)]{7,}"
        
        if let regex = try? NSRegularExpression(pattern: phonePattern) {
            let range = NSRange(text.startIndex..., in: text)
            if let match = regex.firstMatch(in: text, range: range) {
                if let swiftRange = Range(match.range, in: text) {
                    let phone = String(text[swiftRange]).trimmingCharacters(in: .whitespacesAndNewlines)
                    print("üìû Extracted phone from text: \(phone)")
                    return phone
                }
            }
        }
        
        return nil
    }
    
    private func makePhoneCall(phoneNumber: String) {
        let cleanNumber = phoneNumber.replacingOccurrences(of: "[^+0-9]", with: "", options: .regularExpression)
        
        guard !cleanNumber.isEmpty else {
            print("‚ùå WebViewModel: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: \(phoneNumber)")
            showCallError()
            return
        }
        
        let telURL = "tel:\(cleanNumber)"
        print("üìû WebViewModel: –í—ã–ø–æ–ª–Ω—è–µ–º –∑–≤–æ–Ω–æ–∫ –Ω–∞ \(cleanNumber)")
        
        openExternalURL(urlString: telURL)
    }
    // –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —ç—Ç–∏ –º–µ—Ç–æ–¥—ã –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π WebViewModel.swift

    func handleMessage(type: String, data: [String: Any]) {
        print("üì± WebViewModel: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–ø–∞ \(type)")
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ WebRTC —Å–æ–æ–±—â–µ–Ω–∏–π
        switch type {
        case "webrtcMediaRequest":
            print("üé§ WebRTC –∑–∞–ø—Ä–æ—Å –º–µ–¥–∏–∞: \(data)")
        case "webrtcStreamObtained":
            print("‚úÖ WebRTC –ø–æ—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω: \(data)")
        case "webrtcError":
            print("‚ùå WebRTC –æ—à–∏–±–∫–∞: \(data)")
        case "audioButtonClicked":
            print("üé§ –ö–Ω–æ–ø–∫–∞ –∞—É–¥–∏–æ –Ω–∞–∂–∞—Ç–∞: \(data)")
        default:
            // –û–±—ã—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            if let handler = messageHandlers[type] {
                handler(data)
            } else {
                print("‚ö†Ô∏è WebViewModel: –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Ç–∏–ø–∞ \(type)")
            }
        }
    }
    
    private func openCallURL(_ urlString: String) {
        print("üìû WebViewModel: –û—Ç–∫—Ä—ã–≤–∞–µ–º URL –∑–≤–æ–Ω–∫–∞: \(urlString)")
        
        // –î–ª—è signed URL –∏–ª–∏ WebRTC —Å—Å—ã–ª–æ–∫ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –≤ Safari
        guard let url = URL(string: urlString) else {
            print("‚ùå WebViewModel: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL: \(urlString)")
            return
        }
        
        DispatchQueue.main.async {
            // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–∞—è –≤–µ–±-—Å—Å—ã–ª–∫–∞ –¥–ª—è –∑–≤–æ–Ω–∫–∞, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ Safari
            if urlString.hasPrefix("http") {
                UIApplication.shared.open(url) { success in
                    print("üìû WebViewModel: Safari open result: \(success)")
                    if !success {
                        self.showCallError()
                    }
                }
            } else {
                // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ö–µ–º –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω–æ
                self.openExternalURL(urlString: urlString)
            }
        }
    }
    
    private func openExternalURL(urlString: String) {
        guard let url = URL(string: urlString) else {
            print("‚ùå WebViewModel: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL: \(urlString)")
            return
        }
        
        print("üîó WebViewModel: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å URL: \(urlString)")
        
        DispatchQueue.main.async {
            if UIApplication.shared.canOpenURL(url) {
                UIApplication.shared.open(url) { success in
                    if success {
                        print("‚úÖ WebViewModel: –£—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç \(urlString)")
                    } else {
                        print("‚ùå WebViewModel: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å \(urlString)")
                        
                        if urlString.hasPrefix("tel:") {
                            self.showPhoneAlert(phoneNumber: urlString.replacingOccurrences(of: "tel:", with: ""))
                        } else {
                            self.showCallError()
                        }
                    }
                }
            } else {
                print("‚ùå WebViewModel: –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å URL: \(urlString)")
                
                if urlString.hasPrefix("tel:") {
                    self.showPhoneAlert(phoneNumber: urlString.replacingOccurrences(of: "tel:", with: ""))
                } else {
                    self.showCallError()
                }
            }
        }
    }
    
    private func showPhoneAlert(phoneNumber: String) {
        DispatchQueue.main.async {
            guard let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
                  let window = windowScene.windows.first,
                  let rootViewController = window.rootViewController else {
                return
            }
            
            let alert = UIAlertController(
                title: "–ü–æ–∑–≤–æ–Ω–∏—Ç—å",
                message: "–•–æ—Ç–∏—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É \(phoneNumber)?",
                preferredStyle: .alert
            )
            
            alert.addAction(UIAlertAction(title: "–ü–æ–∑–≤–æ–Ω–∏—Ç—å", style: .default) { _ in
                if let url = URL(string: "tel:\(phoneNumber)") {
                    UIApplication.shared.open(url)
                }
            })
            
            alert.addAction(UIAlertAction(title: "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä", style: .default) { _ in
                UIPasteboard.general.string = phoneNumber
            })
            
            alert.addAction(UIAlertAction(title: "–û—Ç–º–µ–Ω–∞", style: .cancel))
            
            // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –≤–µ—Ä—Ö–Ω–∏–π view controller
            var topController = rootViewController
            while let presentedController = topController.presentedViewController {
                topController = presentedController
            }
            
            topController.present(alert, animated: true)
        }
    }
    
    private func showCallError() {
        DispatchQueue.main.async {
            guard let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
                  let window = windowScene.windows.first,
                  let rootViewController = window.rootViewController else {
                return
            }
            
            let alert = UIAlertController(
                title: "–û—à–∏–±–∫–∞ –∑–≤–æ–Ω–∫–∞",
                message: "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–≤–æ–Ω–æ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.",
                preferredStyle: .alert
            )
            
            alert.addAction(UIAlertAction(title: "OK", style: .default))
            
            var topController = rootViewController
            while let presentedController = topController.presentedViewController {
                topController = presentedController
            }
            
            topController.present(alert, animated: true)
        }
    }
    
    // –ú–ï–¢–û–î–´ –î–õ–Ø –û–¢–õ–ê–î–ö–ò
    func debugWebViewContent() {
        let debugScript = """
        console.log('üîç DEBUG: Searching for call elements...');
        
        // –ò—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤
        var callElements = [];
        
        // 1. –°—Å—ã–ª–∫–∏ tel:
        var telLinks = document.querySelectorAll('a[href^="tel:"]');
        telLinks.forEach(function(link) {
            callElements.push({type: 'tel-link', href: link.href, text: link.textContent});
        });
        
        // 2. –ö–Ω–æ–ø–∫–∏ —Å data-phone
        var phoneButtons = document.querySelectorAll('[data-phone]');
        phoneButtons.forEach(function(btn) {
            callElements.push({type: 'data-phone', phone: btn.dataset.phone, text: btn.textContent});
        });
        
        // 3. –ö–Ω–æ–ø–∫–∏ —Å data-call
        var callButtons = document.querySelectorAll('[data-call]');
        callButtons.forEach(function(btn) {
            callElements.push({type: 'data-call', call: btn.dataset.call, text: btn.textContent});
        });
        
        // 4. –ö–Ω–æ–ø–∫–∏ —Å –∫–ª–∞—Å—Å–∞–º–∏ call/phone
        var classButtons = document.querySelectorAll('.call-button, .phone-button, .call, .phone');
        classButtons.forEach(function(btn) {
            callElements.push({type: 'class-button', className: btn.className, text: btn.textContent});
        });
        
        // 5. –ö–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º –æ –∑–≤–æ–Ω–∫–∞—Ö
        var allButtons = document.querySelectorAll('button, [role="button"]');
        allButtons.forEach(function(btn) {
            var text = btn.textContent || btn.innerText || '';
            if (text.toLowerCase().includes('–∑–≤–æ–Ω–æ–∫') || text.toLowerCase().includes('–ø–æ–∑–≤–æ–Ω–∏—Ç—å') || 
                text.toLowerCase().includes('call') || text.toLowerCase().includes('phone')) {
                callElements.push({type: 'text-button', text: text, onclick: btn.onclick ? btn.onclick.toString() : null});
            }
        });
        
        console.log('üîç Found call elements:', callElements);
        
        if (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.iOS) {
            window.webkit.messageHandlers.iOS.postMessage({
                type: 'debugCallElements',
                elements: callElements
            });
        }
        
        return callElements;
        """
        
        evaluateJavaScript(debugScript)
    }
}
