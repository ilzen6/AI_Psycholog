//
//  ContentView.swift - –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï Publishing changes
//  AI_Psycholog
//
//  –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–±–∏—Ä–∞–µ–º –≤—Å–µ Timer –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º Task + async/await
//

import SwiftUI
import WebKit

struct ContentView: View {
    @State private var selectedTab = 0
    @State private var isAuthenticated = false
    @State private var showSplash = true
    @State private var showDisclaimer = false
    @State private var showOnboarding = false
    @StateObject private var webViewModel = WebViewModel()
    @AppStorage("isDarkMode") private var isDarkMode = false
    @AppStorage("hasAcceptedDisclaimer") private var hasAcceptedDisclaimer = false
    @AppStorage("hasSeenOnboarding") private var hasSeenOnboarding = false
    
    var body: some View {
        ZStack {
            if showSplash {
                SplashView(showSplash: $showSplash)
                    .transition(.opacity)
            } else if !hasAcceptedDisclaimer && showDisclaimer {
                DisclaimerView(
                    isPresented: $showDisclaimer,
                    onAccepted: {
                        print("üì± ContentView: –î–∏—Å–∫–ª–µ–π–º–µ—Ä –ø—Ä–∏–Ω—è—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É")
                        Task {
                            try? await Task.sleep(nanoseconds: 100_000_000) // 0.1 —Å–µ–∫
                            showDisclaimer = false
                            if !hasSeenOnboarding {
                                try? await Task.sleep(nanoseconds: 300_000_000) // 0.3 —Å–µ–∫
                                showOnboarding = true
                            }
                        }
                    }
                )
                .transition(.asymmetric(
                    insertion: .move(edge: .bottom),
                    removal: .move(edge: .bottom)
                ))
            } else if !hasSeenOnboarding && showOnboarding {
                OnboardingView(
                    isPresented: $showOnboarding,
                    onCompleted: {
                        print("üì± ContentView: –û–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
                        Task {
                            try? await Task.sleep(nanoseconds: 100_000_000) // 0.1 —Å–µ–∫
                            showOnboarding = false
                        }
                    }
                )
                .transition(.asymmetric(
                    insertion: .move(edge: .trailing),
                    removal: .move(edge: .leading)
                ))
            } else if !isAuthenticated {
                LoginView(isAuthenticated: $isAuthenticated)
                    .transition(.asymmetric(
                        insertion: .move(edge: .trailing),
                        removal: .move(edge: .leading)
                    ))
            } else {
                TabView(selection: $selectedTab) {
                    ChatView(webViewModel: webViewModel)
                        .tabItem {
                            Label("–ß–∞—Ç", systemImage: "message.fill")
                        }
                        .tag(0)
                    
                    MoodJournalView()
                        .tabItem {
                            Label("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", systemImage: "face.smiling")
                        }
                        .tag(1)
                    
                    ExercisesView()
                        .tabItem {
                            Label("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", systemImage: "leaf.fill")
                        }
                        .tag(2)
                    
                    ProfileView(webViewModel: webViewModel)
                        .tabItem {
                            Label("–ü—Ä–æ—Ñ–∏–ª—å", systemImage: "person.fill")
                        }
                        .tag(3)
                    
                    PaymentView()
                        .tabItem {
                            Label("–û–ø–ª–∞—Ç–∞", systemImage: "creditcard.fill")
                        }
                        .tag(4)
                }
                .accentColor(Color(hex: "889E8C"))
                .transition(.asymmetric(
                    insertion: .move(edge: .trailing),
                    removal: .move(edge: .leading)
                ))
            }
        }
        .preferredColorScheme(isDarkMode ? .dark : .light)
        .animation(.easeInOut(duration: 0.5), value: showSplash)
        .animation(.easeInOut(duration: 0.3), value: showOnboarding)
        .animation(.easeInOut(duration: 0.3), value: showDisclaimer)
        .animation(.easeInOut(duration: 0.3), value: isAuthenticated)
        .task {
            // –ö–†–ò–¢–ò–ß–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º Task –≤–º–µ—Å—Ç–æ onAppear –¥–ª—è async –æ–ø–µ—Ä–∞—Ü–∏–π
            await setupInitialState()
        }
        .onReceive(NotificationCenter.default.publisher(for: .userDidLogout)) { _ in
            print("üì± ContentView: ‚ö†Ô∏è –ü–û–õ–£–ß–ï–ù–û –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –í–´–•–û–î–ï –ò–ó –ê–ö–ö–ê–£–ù–¢–ê")
            
            Task {
                await MainActor.run {
                    print("üì± ContentView: –ë—ã–ª–æ: isAuthenticated = \(isAuthenticated)")
                    
                    // –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    isAuthenticated = false
                    
                    print("üì± ContentView: –°—Ç–∞–ª–æ: isAuthenticated = \(isAuthenticated)")
                    print("üì± ContentView: ‚úÖ –ü–ï–†–ï–•–û–î –ö –≠–ö–†–ê–ù–£ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò")
                }
            }
        }
        .onReceive(NotificationCenter.default.publisher(for: .userDidLogin)) { _ in
            print("üì± ContentView: –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ –≤ –∞–∫–∫–∞—É–Ω—Ç")
            
            Task {
                await MainActor.run {
                    print("üì± ContentView: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isAuthenticated = true")
                    isAuthenticated = true
                }
            }
        }
    }
    
    // –ö–†–ò–¢–ò–ß–ù–û: Async —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    private func setupInitialState() async {
        print("üì± ContentView: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        print("   hasAcceptedDisclaimer: \(hasAcceptedDisclaimer)")
        print("   hasSeenOnboarding: \(hasSeenOnboarding)")
        
        applyThemeOnLaunch()
        
        // –ñ–¥–µ–º –∞–Ω–∏–º–∞—Ü–∏—é splash screen
        try? await Task.sleep(nanoseconds: 4_000_000_000) // 4 —Å–µ–∫—É–Ω–¥—ã
        
        print("üì± ContentView: –ó–∞–≤–µ—Ä—à–∞–µ–º splash screen")
        showSplash = false
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏
        try? await Task.sleep(nanoseconds: 500_000_000) // 0.5 —Å–µ–∫
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —ç–∫—Ä–∞–Ω
        if !hasAcceptedDisclaimer {
            print("üì± ContentView: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏—Å–∫–ª–µ–π–º–µ—Ä")
            showDisclaimer = true
        } else if !hasSeenOnboarding {
            print("üì± ContentView: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥")
            showOnboarding = true
        } else {
            print("üì± ContentView: –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∂–µ—Ç—Å—è LoginView
        }
    }
    
    private func applyThemeOnLaunch() {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene {
            windowScene.windows.forEach { window in
                window.overrideUserInterfaceStyle = isDarkMode ? .dark : .light
            }
        }
    }
}
