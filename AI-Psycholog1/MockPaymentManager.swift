//
//  MockPaymentManager.swift - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å 3 –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
//  AI_Psycholog
//
//  –£–±—Ä–∞–Ω 4-–π –ø—Ä–æ–¥—É–∫—Ç (15 —Å–µ—Å—Å–∏–π), –æ—Å—Ç–∞–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞
//

import Foundation
import SwiftUI

// MARK: - Mock Product (–∏–º–∏—Ç–∞—Ü–∏—è StoreKit Product)
struct MockProduct: Identifiable {
    let id: String
    let displayName: String
    let description: String
    let price: Double // –ò–∑–º–µ–Ω–µ–Ω–æ —Å Decimal –Ω–∞ Double
    let displayPrice: String
    let sessionCount: Int
    let isPopular: Bool
    
    static let allProducts: [MockProduct] = [
        MockProduct(
            id: "sessions_5pack",
            displayName: "–°—Ç–∞—Ä—Ç–æ–≤—ã–π –ø–∞–∫–µ—Ç",
            description: "–ü–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å AI-–ø—Å–∏—Ö–æ–ª–æ–≥–æ–º",
            price: 2000.0,  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ 199.0
            displayPrice: "2000 ‚ÇΩ", // –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ "199 ‚ÇΩ"
            sessionCount: 5,
            isPopular: false
        ),
        MockProduct(
            id: "sessions_7pack",
            displayName: "–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –≤—ã–±–æ—Ä",
            description: "–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ –∫–∞—á–µ—Å—Ç–≤–∞",
            price: 2500.0,  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ 299.0
            displayPrice: "2500 ‚ÇΩ", // –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ "299 ‚ÇΩ"
            sessionCount: 7,
            isPopular: true
        ),
        MockProduct(
            id: "sessions_10pack",
            displayName: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã–≥–æ–¥–∞",
            description: "–ë–æ–ª—å—à–µ —Å–µ—Å—Å–∏–π - –±–æ–ª—å—à–µ —ç–∫–æ–Ω–æ–º–∏—è",
            price: 3000.0,  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ 399.0
            displayPrice: "3000 ‚ÇΩ", // –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ "399 ‚ÇΩ"
            sessionCount: 10,
            isPopular: false
        )
    ]
}

// MARK: - Mock Payment Manager
@MainActor
class MockPaymentManager: ObservableObject {
    static let shared = MockPaymentManager()
    
    @Published var products: [MockProduct] = []
    @Published var isLoading = false
    @Published var errorMessage = ""
    @Published var purchasedProducts: Set<String> = []
    
    private init() {}
    
    // MARK: - –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–∏–º–∏—Ç–∞—Ü–∏—è)
    func loadProducts() async {
        print("üõí –ó–∞–≥—Ä—É–∂–∞–µ–º mock –ø—Ä–æ–¥—É–∫—Ç—ã...")
        isLoading = true
        errorMessage = ""
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏
        try? await Task.sleep(nanoseconds: 1_500_000_000) // 1.5 —Å–µ–∫—É–Ω–¥—ã
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—É—é –æ—à–∏–±–∫—É —Å–µ—Ç–∏ (5% —à–∞–Ω—Å)
        if Bool.random() && Int.random(in: 1...20) == 1 {
            errorMessage = "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ (–∏–º–∏—Ç–∞—Ü–∏—è)"
            isLoading = false
            print("‚ùå Mock –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
            return
        }
        
        products = MockProduct.allProducts
        isLoading = false
        
        print("‚úÖ Mock –ø—Ä–æ–¥—É–∫—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: \(products.count) —à—Ç.")
        products.forEach { product in
            print("   - \(product.displayName): \(product.sessionCount) —Å–µ—Å—Å–∏–π –∑–∞ \(product.displayPrice)")
        }
    }
    
    // MARK: - –ü–æ–∫—É–ø–∫–∞ (–∏–º–∏—Ç–∞—Ü–∏—è)
    func purchase(_ product: MockProduct) async -> Bool {
        print("üõí –ù–∞—á–∏–Ω–∞–µ–º mock –ø–æ–∫—É–ø–∫—É: \(product.displayName)")
        isLoading = true
        errorMessage = ""
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏ (2-4 —Å–µ–∫—É–Ω–¥—ã)
        let delay = Double.random(in: 2.0...4.0)
        try? await Task.sleep(nanoseconds: UInt64(delay * 1_000_000_000))
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –ø–æ–∫—É–ø–∫—É (95% —É—Å–ø–µ—Ö–∞)
        let success = Int.random(in: 1...20) != 1 // 19/20 —à–∞–Ω—Å —É—Å–ø–µ—Ö–∞
        
        if success {
            purchasedProducts.insert(product.id)
            addSessionsToUser(product.sessionCount)
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            savePurchaseHistory(product)
            
            print("‚úÖ Mock –ø–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞: \(product.displayName) (+\(product.sessionCount) —Å–µ—Å—Å–∏–π)")
        } else {
            errorMessage = "–ò–º–∏—Ç–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            print("‚ùå Mock –ø–æ–∫—É–ø–∫–∞ –Ω–µ—É–¥–∞—á–Ω–∞: \(product.displayName)")
        }
        
        isLoading = false
        return success
    }
    
    // MARK: - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫ (–∏–º–∏—Ç–∞—Ü–∏—è)
    func restorePurchases() async {
        print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mock –ø–æ–∫—É–ø–∫–∏...")
        isLoading = true
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        try? await Task.sleep(nanoseconds: 2_000_000_000) // 2 —Å–µ–∫—É–Ω–¥—ã
        
        // –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –º–æ–∂–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫
        let restoredPurchases = MockProduct.allProducts.prefix(Int.random(in: 0...2))
        var totalRestored = 0
        
        for product in restoredPurchases {
            if !purchasedProducts.contains(product.id) {
                purchasedProducts.insert(product.id)
                totalRestored += product.sessionCount
            }
        }
        
        if totalRestored > 0 {
            addSessionsToUser(totalRestored)
            print("‚úÖ Mock –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: \(totalRestored) —Å–µ—Å—Å–∏–π")
        } else {
            print("‚ÑπÔ∏è Mock –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: –Ω–æ–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        }
        
        isLoading = false
    }
    
    // MARK: - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    private func addSessionsToUser(_ count: Int) {
        let currentBalance = UserDefaults.standard.integer(forKey: "localSessionBalance")
        let newBalance = currentBalance + count
        UserDefaults.standard.set(newBalance, forKey: "localSessionBalance")
        
        print("üí∞ –î–æ–±–∞–≤–ª–µ–Ω–æ \(count) —Å–µ—Å—Å–∏–π. –õ–æ–∫–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: \(currentBalance) ‚Üí \(newBalance)")
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏–µ —á–∞—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞
        NotificationCenter.default.post(name: NSNotification.Name("SessionBalanceUpdated"), object: nil)
        
        // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
        // APIManager.shared.syncSessionBalance(newBalance) { ... }
    }
    
    // MARK: - –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    func getCurrentSessionBalance() -> Int {
        let balance = UserDefaults.standard.integer(forKey: "localSessionBalance")
        print("üìä –¢–µ–∫—É—â–∏–π –ª–æ–∫–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å–µ—Å—Å–∏–π: \(balance)")
        return balance
    }
    
    // MARK: - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫ (–¥–ª—è –¥–µ–º–æ)
    private func savePurchaseHistory(_ product: MockProduct) {
        var history = UserDefaults.standard.array(forKey: "mockPurchaseHistory") as? [[String: Any]] ?? []
        
        let purchase = [
            "id": product.id,
            "name": product.displayName,
            "sessions": product.sessionCount,
            "price": product.displayPrice,
            "date": Date().timeIntervalSince1970
        ] as [String : Any]
        
        history.append(purchase)
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ø–æ–∫—É–ø–æ–∫
        if history.count > 20 {
            history = Array(history.suffix(20))
        }
        
        UserDefaults.standard.set(history, forKey: "mockPurchaseHistory")
        print("üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–∫–∏: \(product.displayName)")
    }
    
    // MARK: - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫ (–¥–ª—è –¥–µ–º–æ)
    func getPurchaseHistory() -> [[String: Any]] {
        return UserDefaults.standard.array(forKey: "mockPurchaseHistory") as? [[String: Any]] ?? []
    }
    
    // MARK: - –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    func resetAllData() {
        print("üîÑ –°–±—Ä–æ—Å –≤—Å–µ—Ö mock –¥–∞–Ω–Ω—ã—Ö...")
        
        UserDefaults.standard.removeObject(forKey: "localSessionBalance")
        UserDefaults.standard.removeObject(forKey: "mockPurchaseHistory")
        purchasedProducts.removeAll()
        
        NotificationCenter.default.post(name: NSNotification.Name("SessionBalanceUpdated"), object: nil)
        
        print("‚úÖ Mock –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã")
    }
    
    // MARK: - –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    func validateProducts() -> Bool {
        let validProducts = products.allSatisfy { product in
            product.sessionCount > 0 && product.price > 0
        }
        
        if !validProducts {
            errorMessage = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"
            print("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
        }
        
        return validProducts
    }
}
