//
//  BiometricAuth.swift - –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï Publishing changes
//  AI_Psycholog
//
//  –ö–†–ò–¢–ò–ß–ù–û: –£–ë–†–ê–ù–´ –≤—Å–µ @Published –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ canUseBiometrics
//

import LocalAuthentication
import SwiftUI

class BiometricAuth: ObservableObject {
    private let context = LAContext()
    
    // –ö–†–ò–¢–ò–ß–ù–û: –£–±–∏—Ä–∞–µ–º @Published —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å Publishing changes
    private var _biometricType: LABiometryType = .none
    private var _isAvailable = false
    
    // Computed —Å–≤–æ–π—Å—Ç–≤–∞ –ë–ï–ó @Published
    var biometricType: LABiometryType {
        return _biometricType
    }
    
    var isAvailable: Bool {
        return _isAvailable
    }
    
    var canUseBiometrics: Bool {
        var error: NSError?
        let canEvaluate = context.canEvaluatePolicy(
            .deviceOwnerAuthenticationWithBiometrics,
            error: &error
        )
        
        if canEvaluate {
            // –ö–†–ò–¢–ò–ß–ù–û: –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º @Published —Å–≤–æ–π—Å—Ç–≤–∞!
            _biometricType = context.biometryType
            _isAvailable = true
            print("üì± BiometricAuth: –ë–∏–æ–º–µ—Ç—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ - \(_biometricType == .faceID ? "Face ID" : "Touch ID")")
        } else {
            _isAvailable = false
            if let error = error {
                print("üì± BiometricAuth: –ë–∏–æ–º–µ—Ç—Ä–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - \(error.localizedDescription)")
            }
        }
        
        return canEvaluate
    }
    
    // –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è authenticate –ë–ï–ó @MainActor
    func authenticate(completion: @escaping (Bool, String?) -> Void) {
        print("üì± BiometricAuth: –ù–∞—á–∏–Ω–∞–µ–º –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é")
        
        let reason = "–í–æ–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –±–∏–æ–º–µ—Ç—Ä–∏–∏"
        
        // –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π context –¥–ª—è –∫–∞–∂–¥–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        let freshContext = LAContext()
        freshContext.localizedFallbackTitle = "–í–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å"
        freshContext.localizedCancelTitle = "–û—Ç–º–µ–Ω–∞"
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –µ—â–µ —Ä–∞–∑
        var error: NSError?
        guard freshContext.canEvaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, error: &error) else {
            let errorMsg = error?.localizedDescription ?? "–ë–∏–æ–º–µ—Ç—Ä–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            print("üì± BiometricAuth: –ë–∏–æ–º–µ—Ç—Ä–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - \(errorMsg)")
            DispatchQueue.main.async {
                completion(false, errorMsg)
            }
            return
        }
        
        // –ö–†–ò–¢–ò–ß–ù–û: –í—ã–ø–æ–ª–Ω—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ù–ï –≤ main thread
        freshContext.evaluatePolicy(
            .deviceOwnerAuthenticationWithBiometrics,
            localizedReason: reason
        ) { success, authError in
            DispatchQueue.main.async {
                if success {
                    print("üì± BiometricAuth: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                    completion(true, nil)
                } else {
                    let errorMessage = self.handleBiometricError(authError)
                    print("üì± BiometricAuth: –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - \(errorMessage)")
                    completion(false, errorMessage)
                }
            }
        }
    }
    
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–∏–æ–º–µ—Ç—Ä–∏–∏
    private func handleBiometricError(_ error: Error?) -> String {
        guard let authError = error else {
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
        }
        
        guard let laError = authError as? LAError else {
            return authError.localizedDescription
        }
        
        switch laError.code {
        case .userCancel:
            return "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
        case .userFallback:
            return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è"
        case .systemCancel:
            return "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–æ–π"
        case .passcodeNotSet:
            return "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ–¥-–ø–∞—Ä–æ–ª—å –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"
        case .biometryNotAvailable:
            return "–ë–∏–æ–º–µ—Ç—Ä–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"
        case .biometryNotEnrolled:
            return "–ë–∏–æ–º–µ—Ç—Ä–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
        case .biometryLockout:
            return "–ë–∏–æ–º–µ—Ç—Ä–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥-–ø–∞—Ä–æ–ª—å."
        case .authenticationFailed:
            return "–ë–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å"
        case .invalidContext:
            return "–ö–æ–Ω—Ç–µ–∫—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω"
        case .notInteractive:
            return "–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        default:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –±–∏–æ–º–µ—Ç—Ä–∏–∏"
        }
    }
    
    func enableBiometrics(for username: String) {
        UserDefaults.standard.set(true, forKey: "biometrics_\(username)")
        print("üì± BiometricAuth: –ë–∏–æ–º–µ—Ç—Ä–∏—è –≤–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \(username)")
    }
    
    func isBiometricsEnabled(for username: String) -> Bool {
        return UserDefaults.standard.bool(forKey: "biometrics_\(username)")
    }
    
    func disableBiometrics(for username: String) {
        UserDefaults.standard.removeObject(forKey: "biometrics_\(username)")
        print("üì± BiometricAuth: –ë–∏–æ–º–µ—Ç—Ä–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \(username)")
    }
    
    // –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–ï–ó Publishing changes
    func initializeBiometrics() {
        Task {
            let _ = canUseBiometrics // –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        }
    }
}
