//
//  MoodLevel.swift - –ü—Ä–æ—Å—Ç—ã–µ –∏ –∫—Ä–∞—Å–∏–≤—ã–µ —Å–º–∞–π–ª–∏–∫–∏ –∫–∞–∫ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ
//  AI_Psycholog
//
//  –ß–∏—Å—Ç—ã–π –¥–∏–∑–∞–π–Ω —Å –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–º–∞–π–ª–∏–∫–∞–º–∏ –∏ –∫—Ä–∞—Å–∏–≤—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
//

import SwiftUI

enum MoodLevel: String, CaseIterable, Codable {
    case verySad = "very_sad"
    case sad = "sad"
    case neutral = "neutral"
    case happy = "happy"
    case veryHappy = "very_happy"
    
    @ViewBuilder var image: some View {
        switch self {
        case .verySad:
            // üò¢ –û—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω—ã–π - —Ç–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π —Å –ø–ª–∞—á—É—â–∏–º –ª–∏—Ü–æ–º
            ZStack {
                Circle()
                    .fill(Color(red: 0.7, green: 0.2, blue: 0.2)) // –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π
                    .frame(width: 40, height: 40)
                    .shadow(color: .black.opacity(0.15), radius: 4, x: 0, y: 2)
                
                VStack(spacing: 4) {
                    // –ü—Ä–æ—Å—Ç—ã–µ –±–µ–ª—ã–µ –≥–ª–∞–∑–∞
                    HStack(spacing: 6) {
                        Ellipse()
                            .fill(Color.white)
                            .frame(width: 3, height: 4)
                        
                        Ellipse()
                            .fill(Color.white)
                            .frame(width: 3, height: 4)
                    }
                    
                    // –û–ß–ï–ù–¨ –≥—Ä—É—Å—Ç–Ω—ã–π —Ä–æ—Ç (–±–æ–ª—å—à–∞—è –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è –¥—É–≥–∞)
                    Path { path in
                        path.move(to: CGPoint(x: 0, y: 0))
                        path.addQuadCurve(to: CGPoint(x: 14, y: 0), control: CGPoint(x: 7, y: 5))
                    }
                    .stroke(Color.white, style: StrokeStyle(lineWidth: 2, lineCap: .round))
                    .frame(width: 14, height: 5)
                    .scaleEffect(y: -1) // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –¥–ª—è –≥—Ä—É—Å—Ç–Ω–æ–≥–æ —Ä—Ç–∞
                    .offset(y: 2)
                }
            }
            
        case .sad:
            // üòû –ì—Ä—É—Å—Ç–Ω—ã–π - —Ä–æ–∑–æ–≤–æ-–∫—Ä–∞—Å–Ω—ã–π
            ZStack {
                Circle()
                    .fill(Color(red: 0.9, green: 0.4, blue: 0.4)) // –†–æ–∑–æ–≤–æ-–∫—Ä–∞—Å–Ω—ã–π
                    .frame(width: 40, height: 40)
                    .shadow(color: .black.opacity(0.15), radius: 4, x: 0, y: 2)
                
                VStack(spacing: 4) {
                    // –ü—Ä–æ—Å—Ç—ã–µ –±–µ–ª—ã–µ –≥–ª–∞–∑–∞
                    HStack(spacing: 6) {
                        Ellipse()
                            .fill(Color.white)
                            .frame(width: 3, height: 4)
                        
                        Ellipse()
                            .fill(Color.white)
                            .frame(width: 3, height: 4)
                    }
                    
                    // –ì—Ä—É—Å—Ç–Ω—ã–π —Ä–æ—Ç (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è –¥—É–≥–∞)
                    Path { path in
                        path.move(to: CGPoint(x: 0, y: 0))
                        path.addQuadCurve(to: CGPoint(x: 10, y: 0), control: CGPoint(x: 5, y: 3))
                    }
                    .stroke(Color.white, style: StrokeStyle(lineWidth: 2, lineCap: .round))
                    .frame(width: 10, height: 3)
                    .scaleEffect(y: -1) // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –¥–ª—è –≥—Ä—É—Å—Ç–Ω–æ–≥–æ —Ä—Ç–∞
                    .offset(y: 2)
                }
            }
            
        case .neutral:
            // üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π - –æ—Ä–∞–Ω–∂–µ–≤—ã–π
            ZStack {
                Circle()
                    .fill(Color(red: 1.0, green: 0.6, blue: 0.3)) // –û—Ä–∞–Ω–∂–µ–≤—ã–π
                    .frame(width: 40, height: 40)
                    .shadow(color: .black.opacity(0.15), radius: 4, x: 0, y: 2)
                
                VStack(spacing: 4) {
                    // –ü—Ä–æ—Å—Ç—ã–µ –±–µ–ª—ã–µ –≥–ª–∞–∑–∞
                    HStack(spacing: 6) {
                        Ellipse()
                            .fill(Color.white)
                            .frame(width: 3, height: 4)
                        
                        Ellipse()
                            .fill(Color.white)
                            .frame(width: 3, height: 4)
                    }
                    
                    // –ü—Ä—è–º–∞—è –ª–∏–Ω–∏—è —Ä—Ç–∞
                    RoundedRectangle(cornerRadius: 1)
                        .fill(Color.white)
                        .frame(width: 8, height: 2)
                        .offset(y: 2)
                }
            }
            
        case .happy:
            // üòä –°—á–∞—Å—Ç–ª–∏–≤—ã–π - –∂–µ–ª—Ç—ã–π
            ZStack {
                Circle()
                    .fill(Color(red: 1.0, green: 0.8, blue: 0.2)) // –Ø—Ä–∫–æ-–∂–µ–ª—Ç—ã–π
                    .frame(width: 40, height: 40)
                    .shadow(color: .black.opacity(0.15), radius: 4, x: 0, y: 2)
                
                VStack(spacing: 4) {
                    // –ü—Ä–æ—Å—Ç—ã–µ –±–µ–ª—ã–µ –≥–ª–∞–∑–∞
                    HStack(spacing: 6) {
                        Ellipse()
                            .fill(Color.white)
                            .frame(width: 3, height: 4)
                        
                        Ellipse()
                            .fill(Color.white)
                            .frame(width: 3, height: 4)
                    }
                    
                    // –°—á–∞—Å—Ç–ª–∏–≤–∞—è —É–ª—ã–±–∫–∞
                    Path { path in
                        path.move(to: CGPoint(x: 0, y: 0))
                        path.addQuadCurve(to: CGPoint(x: 12, y: 0), control: CGPoint(x: 6, y: 4))
                    }
                    .stroke(Color.white, style: StrokeStyle(lineWidth: 2, lineCap: .round))
                    .frame(width: 12, height: 4)
                    .offset(y: 2)
                }
            }
            
        case .veryHappy:
            // üòÉ –û—á–µ–Ω—å —Å—á–∞—Å—Ç–ª–∏–≤—ã–π - –∑–µ–ª–µ–Ω—ã–π —Å –±–æ–ª—å—à–æ–π —É–ª—ã–±–∫–æ–π
            ZStack {
                Circle()
                    .fill(Color(red: 0.3, green: 0.7, blue: 0.5)) // –ó–µ–ª–µ–Ω—ã–π
                    .frame(width: 40, height: 40)
                    .shadow(color: .black.opacity(0.15), radius: 4, x: 0, y: 2)
                
                VStack(spacing: 4) {
                    // –ü—Ä–æ—Å—Ç—ã–µ –±–µ–ª—ã–µ –≥–ª–∞–∑–∞
                    HStack(spacing: 6) {
                        Ellipse()
                            .fill(Color.white)
                            .frame(width: 3, height: 4)
                        
                        Ellipse()
                            .fill(Color.white)
                            .frame(width: 3, height: 4)
                    }
                    
                    // –ë–û–õ–¨–®–ê–Ø —Å—á–∞—Å—Ç–ª–∏–≤–∞—è —É–ª—ã–±–∫–∞
                    Path { path in
                        path.move(to: CGPoint(x: 0, y: 0))
                        path.addQuadCurve(to: CGPoint(x: 16, y: 0), control: CGPoint(x: 8, y: 6))
                    }
                    .stroke(Color.white, style: StrokeStyle(lineWidth: 2.5, lineCap: .round))
                    .frame(width: 16, height: 6)
                    .offset(y: 2)
                }
            }
        }
    }
    
    var title: String {
        switch self {
        case .verySad: return "–£–∂–∞—Å–Ω–æ"
        case .sad: return "–ü–ª–æ—Ö–æ"
        case .neutral: return "–ù–æ—Ä–º–∞–ª—å–Ω–æ"
        case .happy: return "–•–æ—Ä–æ—à–æ"
        case .veryHappy: return "–û—Ç–ª–∏—á–Ω–æ"
        }
    }
    
    var description: String {
        switch self {
        case .verySad: return "–£–∂–∞—Å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –Ω—É–∂–Ω–∞ —Å–µ—Ä—å–µ–∑–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
        case .sad: return "–ì—Ä—É—Å—Ç–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ"
        case .neutral: return "–°–ø–æ–∫–æ–π–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–∏ —Ö–æ—Ä–æ—à–æ –Ω–∏ –ø–ª–æ—Ö–æ"
        case .happy: return "–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏, –¥–µ–Ω—å —É–¥–∞–ª—Å—è"
        case .veryHappy: return "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –ø–æ–ª–æ–Ω —ç–Ω–µ—Ä–≥–∏–∏"
        }
    }
    
    var score: Int {
        switch self {
        case .verySad: return 1
        case .sad: return 2
        case .neutral: return 3
        case .happy: return 4
        case .veryHappy: return 5
        }
    }
    
    var color: Color {
        switch self {
        case .verySad: return Color(red: 0.7, green: 0.2, blue: 0.2) // –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π
        case .sad: return Color(red: 0.9, green: 0.4, blue: 0.4) // –†–æ–∑–æ–≤–æ-–∫—Ä–∞—Å–Ω—ã–π
        case .neutral: return Color(red: 1.0, green: 0.6, blue: 0.3) // –û—Ä–∞–Ω–∂–µ–≤—ã–π
        case .happy: return Color(red: 1.0, green: 0.8, blue: 0.2) // –ñ–µ–ª—Ç—ã–π
        case .veryHappy: return Color(red: 0.3, green: 0.7, blue: 0.5) // –ó–µ–ª–µ–Ω—ã–π
        }
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ score
    static func from(score: Int) -> MoodLevel {
        switch score {
        case 1: return .verySad
        case 2: return .sad
        case 3: return .neutral
        case 4: return .happy
        case 5: return .veryHappy
        default: return .neutral
        }
    }
}

// MARK: - Time Filter –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
enum TimeFilter: CaseIterable {
    case week, month, year, all
    
    var title: String {
        switch self {
        case .week: return "–ù–µ–¥–µ–ª—è"
        case .month: return "–ú–µ—Å—è—Ü"
        case .year: return "–ì–æ–¥"
        case .all: return "–í—Å–µ"
        }
    }
}
