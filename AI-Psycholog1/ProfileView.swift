//
//  ProfileView.swift - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è –ë–ï–ó onChange –æ—à–∏–±–æ–∫
//  AI_Psycholog
//
//  –ö–†–ò–¢–ò–ß–ù–û: –£–ë–†–ê–ù–´ –í–°–ï onChange - –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –∫–Ω–æ–ø–∫–∏
//

import SwiftUI
import WebKit
struct ProfileView: View {
    @ObservedObject var webViewModel: WebViewModel
    @StateObject private var sessionManager = SessionDataManager.shared
    @State private var profile = UserProfile()
    @State private var showingImagePicker = false
    @State private var avatarImage: UIImage?
    @State private var selectedSegment = 0
    @State private var localSessionBalance = 0
    @AppStorage("isDarkMode") private var isDarkMode = false
    @AppStorage("saveHistory") private var saveHistory = false
    
    var body: some View {
        NavigationView {
            VStack(spacing: 0) {
                // –°–µ–∫—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –∏ –∏–º–µ–Ω–∏
                VStack(spacing: 16) {
                    if let avatarImage = avatarImage {
                        Image(uiImage: avatarImage)
                            .resizable()
                            .scaledToFill()
                            .frame(width: 100, height: 100)
                            .clipShape(Circle())
                    } else {
                        Circle()
                            .fill(Color.gray.opacity(0.3))
                            .frame(width: 100, height: 100)
                            .overlay(
                                Image(systemName: "person.fill")
                                    .font(.largeTitle)
                                    .foregroundColor(.gray)
                            )
                    }
                    
                    Text(profile.fullName.isEmpty ? "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" : profile.fullName)
                        .font(.title2)
                        .fontWeight(.semibold)
                    
                    // –ë–∞–ª–∞–Ω—Å —Å–µ—Å—Å–∏–π
                    HStack {
                        Image(systemName: "star.circle.fill")
                            .foregroundColor(Color(hex: "889E8C"))
                        Text("–î–æ—Å—Ç—É–ø–Ω–æ —Å–µ—Å—Å–∏–π: \(profile.sessionBalance + localSessionBalance)")
                            .foregroundColor(.secondary)
                    }
                    
                    Button(action: {
                        NotificationCenter.default.post(name: .showPayment, object: nil)
                    }) {
                        Text("–ö—É–ø–∏—Ç—å —Å–µ—Å—Å–∏–∏")
                            .foregroundColor(.white)
                            .padding(.horizontal, 24)
                            .padding(.vertical, 8)
                            .background(Color(hex: "889E8C"))
                            .cornerRadius(20)
                    }
                }
                .padding(.vertical, 20)
                
                // –°–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å
                Picker("", selection: $selectedSegment) {
                    Text("–°–µ—Å—Å–∏–∏").tag(0)
                    Text("–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è").tag(1)
                    Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏").tag(2)
                }
                .pickerStyle(SegmentedPickerStyle())
                .padding(.horizontal)
                
                // –ö–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
                ScrollView {
                    switch selectedSegment {
                    case 0:
                        fixedSessionsSection
                    case 1:
                        achievementsSection
                    case 2:
                        settingsSection
                    default:
                        EmptyView()
                    }
                }
            }
            .navigationBarHidden(true)
            .background(Color(UIColor.systemBackground))
            .onAppear {
                setupProfileView()
            }
            .onReceive(NotificationCenter.default.publisher(for: NSNotification.Name("SessionBalanceUpdated"))) { _ in
                DispatchQueue.main.async {
                    loadLocalSessionBalance()
                }
            }
            .onReceive(NotificationCenter.default.publisher(for: .sessionDataUpdated)) { _ in
                DispatchQueue.main.async {
                    handleSessionDataUpdate()
                }
            }
        }
    }
    
    private func setupProfileView() {
        loadProfile()
        updateTheme(isDark: isDarkMode)
        loadLocalSessionBalance()
        
        print("üì± ProfileView –ø–æ—è–≤–∏–ª—Å—è, –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö...")
        sessionManager.ensureDataLoaded()
    }
    
    private func handleSessionDataUpdate() {
        print("üì± ProfileView: –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–π")
        print("üì± ProfileView: –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π: \(sessionManager.sessions.count)")
    }
    
    // MARK: - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Å–µ–∫—Ü–∏—è —Å–µ—Å—Å–∏–π –±–µ–∑ –±–∞–ª–ª–æ–≤ –∏ –≤—Ä–µ–º–µ–Ω–∏
    private var fixedSessionsSection: some View {
        VStack(spacing: 16) {
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è - –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï
            VStack(spacing: 12) {
                HStack {
                    Text("üìä –ò—Å—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–π —Å AI-–ø—Å–∏—Ö–æ–ª–æ–≥–æ–º")
                        .font(.headline)
                    
                    Spacer()
                    
                    // –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    Button(action: {
                        refreshSessionData()
                    }) {
                        HStack(spacing: 4) {
                            Image(systemName: "arrow.clockwise")
                                .font(.caption)
                            Text("–û–±–Ω–æ–≤–∏—Ç—å")
                                .font(.caption)
                        }
                        .foregroundColor(Color(hex: "889E8C"))
                        .padding(.horizontal, 8)
                        .padding(.vertical, 4)
                        .background(Color(hex: "889E8C").opacity(0.1))
                        .cornerRadius(8)
                    }
                    
                    #if DEBUG
                    // DEBUG –∫–Ω–æ–ø–∫–∏
                    Menu("DEBUG") {
                        Button("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–ª–∞–¥–∫—É") {
                            sessionManager.printDebugInfo()
                        }
                        Button("–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç") {
                            sessionManager.addTestSession()
                        }
                        Button("–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã") {
                            sessionManager.clearTestData()
                        }
                        Button("–°–∏–º—É–ª—è—Ü–∏—è –æ—à–∏–±–∫–∏") {
                            sessionManager.simulateNetworkError()
                        }
                        Button("–°–∏–º—É–ª—è—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞") {
                            sessionManager.simulateEmptyResponse()
                        }
                    }
                    .font(.caption)
                    .foregroundColor(.orange)
                    #endif
                }
                
                HStack(spacing: 16) {
                    FixedStatisticCard(
                        title: "–í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π",
                        value: "\(sessionManager.sessions.count)",
                        icon: "message.circle.fill",
                        color: .blue
                    )
                    
                    FixedStatisticCard(
                        title: "–î–Ω–µ–π –ø–æ–¥—Ä—è–¥",
                        value: "\(sessionManager.getStreakDays())",
                        icon: "flame.fill",
                        color: .orange
                    )
                }
                
                HStack(spacing: 16) {
                    FixedStatisticCard(
                        title: "–£—Å–ø–µ—à–Ω—ã—Ö —Å–µ—Å—Å–∏–π",
                        value: "\(getSuccessfulSessionsCount())",
                        icon: "checkmark.circle.fill",
                        color: .green
                    )
                    
                    FixedStatisticCard(
                        title: "–≠—Ç–æ—Ç –º–µ—Å—è—Ü",
                        value: "\(sessionManager.getSessionsThisMonth())",
                        icon: "calendar",
                        color: .purple
                    )
                }
            }
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Å–µ–∫—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–π –ë–ï–ó –ë–ê–õ–õ–û–í –ò –í–†–ï–ú–ï–ù–ò
            VStack(spacing: 12) {
                HStack {
                    Text("üïê –î–µ—Ç–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è")
                        .font(.headline)
                    
                    Spacer()
                    
                    // –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
                    if sessionManager.isLoading {
                        HStack(spacing: 4) {
                            ProgressView()
                                .progressViewStyle(CircularProgressViewStyle(tint: Color(hex: "889E8C")))
                                .scaleEffect(0.7)
                            Text("–ó–∞–≥—Ä—É–∑–∫–∞...")
                                .font(.caption)
                                .foregroundColor(.secondary)
                        }
                    } else {
                        Text("(\(sessionManager.sessions.count) –≤—Å–µ–≥–æ)")
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }
                }
                
                // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
                if sessionManager.isLoading {
                    FixedLoadingView()
                } else if let error = sessionManager.error {
                    FixedErrorView(
                        error: error,
                        onRetry: {
                            print("üì± ProfileView: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
                            sessionManager.refreshData()
                        },
                        onDebug: {
                            sessionManager.printDebugInfo()
                        }
                    )
                } else if sessionManager.sessions.isEmpty {
                    FixedEmptyStateView(
                        onStartSession: {
                            NotificationCenter.default.post(
                                name: NSNotification.Name("SwitchToChat"),
                                object: nil
                            )
                        },
                        onRefresh: {
                            sessionManager.refreshData()
                        }
                    )
                } else {
                    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π –ë–ï–ó –ë–ê–õ–õ–û–í –ò –í–†–ï–ú–ï–ù–ò
                    let profileSessions = sessionManager.getSessionsForProfile().prefix(15)
                    
                    ForEach(Array(profileSessions), id: \.id) { session in
                        FixedSessionCard(session: session)
                    }
                    
                    if sessionManager.sessions.count > 15 {
                        Text("–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –∏–∑ \(sessionManager.sessions.count) —Å–µ—Å—Å–∏–π")
                            .font(.caption)
                            .foregroundColor(.secondary)
                            .padding(.top, 8)
                    }
                    
                    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                    if let lastUpdate = sessionManager.lastLoadTime {
                        Text("–û–±–Ω–æ–≤–ª–µ–Ω–æ: \(lastUpdate, style: .time)")
                            .font(.caption2)
                            .foregroundColor(.secondary)
                            .padding(.top, 4)
                    }
                }
            }
        }
        .padding()
        .onAppear {
            checkSessionData()
        }
    }
    
    private var achievementsSection: some View {
        VStack(spacing: 16) {
            Text("üèÜ –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
                .font(.headline)
                .frame(maxWidth: .infinity, alignment: .leading)
                .padding(.horizontal)
            
            LazyVGrid(columns: [
                GridItem(.flexible()),
                GridItem(.flexible())
            ], spacing: 16) {
                AchievementCard(
                    title: "–ù–æ–≤–∏—á–æ–∫",
                    description: "–ü–µ—Ä–≤–∞—è —Å–µ—Å—Å–∏—è",
                    icon: "star.fill",
                    isUnlocked: sessionManager.sessions.count >= 1,
                    color: .yellow
                )
                
                AchievementCard(
                    title: "–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ",
                    description: "7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥",
                    icon: "calendar",
                    isUnlocked: sessionManager.getStreakDays() >= 7,
                    color: .blue
                )
                
                AchievementCard(
                    title: "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å",
                    description: "10 —Å–µ—Å—Å–∏–π",
                    icon: "leaf.circle",
                    isUnlocked: sessionManager.sessions.count >= 10,
                    color: .green
                )
                
                AchievementCard(
                    title: "–ú–∞—Å—Ç–µ—Ä —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è",
                    description: "30 —Å–µ—Å—Å–∏–π",
                    icon: "hands.sparkles",
                    isUnlocked: sessionManager.sessions.count >= 30,
                    color: .purple
                )
                
                AchievementCard(
                    title: "–ü–æ–∑–∏—Ç–∏–≤–Ω–æ—Å—Ç—å",
                    description: "–ú–Ω–æ–≥–æ —Ö–æ—Ä–æ—à–∏—Ö —Å–µ—Å—Å–∏–π",
                    icon: "sun.max.fill",
                    isUnlocked: getSuccessfulSessionsCount() >= 5,
                    color: .orange
                )
                
                AchievementCard(
                    title: "–¢–µ—Ä–ø–µ–Ω–∏–µ",
                    description: "30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥",
                    icon: "infinity",
                    isUnlocked: sessionManager.getStreakDays() >= 30,
                    color: .pink
                )
            }
            .padding(.horizontal)
        }
        .padding(.vertical)
    }
    
    private var settingsSection: some View {
        VStack(spacing: 16) {
            // –ö–†–ò–¢–ò–ß–ù–û: –£–ë–†–ê–ù onChange - –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ –∫–Ω–æ–ø–∫—É
            HStack {
                Label("–¢–µ–º–Ω–∞—è —Ç–µ–º–∞", systemImage: "moon.fill")
                Spacer()
                Button(action: {
                    DispatchQueue.main.async {
                        isDarkMode.toggle()
                        updateTheme(isDark: isDarkMode)
                    }
                }) {
                    Image(systemName: isDarkMode ? "checkmark.square" : "square")
                        .foregroundColor(Color(hex: "889E8C"))
                        .font(.title2)
                }
            }
            .padding()
            .background(Color(UIColor.secondarySystemBackground))
            .cornerRadius(10)
            
            // –ö–†–ò–¢–ò–ß–ù–û: –£–ë–†–ê–ù onChange - –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ –∫–Ω–æ–ø–∫—É
            VStack(alignment: .leading, spacing: 8) {
                HStack {
                    Label("–°–æ—Ö—Ä–∞–Ω—è—Ç—å –∏—Å—Ç–æ—Ä–∏—é", systemImage: "clock.arrow.circlepath")
                    Spacer()
                    Button(action: {
                        DispatchQueue.main.async {
                            saveHistory.toggle()
                            updateHistorySetting(save: saveHistory)
                        }
                    }) {
                        Image(systemName: saveHistory ? "checkmark.square" : "square")
                            .foregroundColor(Color(hex: "889E8C"))
                            .font(.title2)
                    }
                }
                
                Text(saveHistory ?
                     "–í–∞—à–∏ –¥–∏–∞–ª–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç–µ—Ä–∞–ø–∏–∏" :
                     "–î–∏–∞–ª–æ–≥–∏ —É–¥–∞–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")
                    .font(.caption)
                    .foregroundColor(.secondary)
                    .padding(.leading, 30)
            }
            .padding()
            .background(Color(UIColor.secondarySystemBackground))
            .cornerRadius(10)
            
            #if DEBUG
            VStack(spacing: 12) {
                Button {
                    resetOnboardingFlow()
                } label: {
                    HStack {
                        Image(systemName: "arrow.counterclockwise")
                        Text("–°–±—Ä–æ—Å–∏—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ (DEBUG)")
                    }
                    .foregroundColor(.orange)
                    .frame(maxWidth: .infinity)
                    .padding()
                    .background(Color(UIColor.secondarySystemGroupedBackground))
                    .cornerRadius(10)
                }
                
                Button {
                    sessionManager.printDebugInfo()
                } label: {
                    HStack {
                        Image(systemName: "info.circle")
                        Text("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
                    }
                    .foregroundColor(.blue)
                    .frame(maxWidth: .infinity)
                    .padding()
                    .background(Color(UIColor.secondarySystemGroupedBackground))
                    .cornerRadius(10)
                }
                
                Button {
                    sessionManager.refreshData()
                } label: {
                    HStack {
                        Image(systemName: "arrow.clockwise")
                        Text("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏–∏")
                    }
                    .foregroundColor(.green)
                    .frame(maxWidth: .infinity)
                    .padding()
                    .background(Color(UIColor.secondarySystemGroupedBackground))
                    .cornerRadius(10)
                }
            }
            #endif
            
            
            
            // –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
            Button(action: logout) {
                HStack {
                    Image(systemName: "rectangle.portrait.and.arrow.right")
                    Text("–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
                }
                .foregroundColor(.red)
                .frame(maxWidth: .infinity)
                .padding()
                .background(Color(UIColor.secondarySystemBackground))
                .cornerRadius(10)
            }
        }
        .padding()
    }
    
    // MARK: - Helper Methods
    
    private func refreshSessionData() {
        print("üì± ProfileView: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –æ–±–Ω–æ–≤–∏—Ç—å")
        sessionManager.refreshData()
    }
    
    private func checkSessionData() {
        print("üì± ProfileView: –°–µ–∫—Ü–∏—è —Å–µ—Å—Å–∏–π –ø–æ—è–≤–∏–ª–∞—Å—å")
        print("üì± ProfileView: –°–æ—Å—Ç–æ—è–Ω–∏–µ SessionManager:")
        print("   - –°–µ—Å—Å–∏–π: \(sessionManager.sessions.count)")
        print("   - –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è: \(sessionManager.isLoading)")
        print("   - –û—à–∏–±–∫–∞: \(sessionManager.error ?? "–Ω–µ—Ç")")
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
        if sessionManager.sessions.isEmpty && !sessionManager.isLoading {
            print("üì± ProfileView: –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É...")
            sessionManager.refreshData()
        }
    }
    
    func loadProfile() {
        APIManager.shared.getProfile { result in
            DispatchQueue.main.async {
                switch result {
                case .success(let profileData):
                    self.profile = profileData
                    if let avatarURL = profileData.avatarURL {
                        self.loadAvatarImage(from: avatarURL)
                    }
                    print("üì± ProfileView: –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω, –±–∞–ª–∞–Ω—Å —Å–µ—Å—Å–∏–π: \(profileData.sessionBalance)")
                case .failure(let error):
                    print("‚ùå ProfileView: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: \(error)")
                }
            }
        }
    }
    
    func loadAvatarImage(from urlString: String) {
        guard let url = URL(string: urlString) else { return }
        
        URLSession.shared.dataTask(with: url) { data, _, _ in
            if let data = data, let image = UIImage(data: data) {
                DispatchQueue.main.async {
                    self.avatarImage = image
                }
            }
        }.resume()
    }

    func updateTheme(isDark: Bool) {
        if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene {
            windowScene.windows.forEach { window in
                window.overrideUserInterfaceStyle = isDark ? .dark : .light
            }
        }
        
        let script = """
        if (typeof window.changeWebViewTheme === 'function') {
            window.changeWebViewTheme(\(isDark));
        }
        """
        
        webViewModel.evaluateJavaScript(script)
    }
    
    func updateHistorySetting(save: Bool) {
        let script = """
        if (window.updateHistorySetting) {
            window.updateHistorySetting(\(save));
        }
        """
        webViewModel.evaluateJavaScript(script)
        
        print("–ò—Å—Ç–æ—Ä–∏—è –±—É–¥–µ—Ç \(save ? "—Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è" : "–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è")")
    }
    
    func loadLocalSessionBalance() {
        let balance = UserDefaults.standard.integer(forKey: "localSessionBalance")
        localSessionBalance = balance
        print("üì± ProfileView: –õ–æ–∫–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å–µ—Å—Å–∏–π: \(balance)")
    }
    
    // –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —É—Å–ø–µ—à–Ω—ã—Ö —Å–µ—Å—Å–∏–π (–≤–º–µ—Å—Ç–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è)
    private func getSuccessfulSessionsCount() -> Int {
        return sessionManager.sessions.filter { session in
            session.moodLevel.score >= 4 // –°—á–∏—Ç–∞–µ–º "happy" –∏ "veryHappy" –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–µ
        }.count
    }
    
    #if DEBUG
    private func resetOnboardingFlow() {
        print("üîÑ –°–±—Ä–æ—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –∏ –¥–∏—Å–∫–ª–µ–π–º–µ—Ä–∞")
        
        UserDefaults.standard.set(false, forKey: "hasSeenOnboarding")
        UserDefaults.standard.set(false, forKey: "hasAcceptedDisclaimer")
        UserDefaults.standard.synchronize()
        
        print("üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞:")
        print("   hasSeenOnboarding: \(UserDefaults.standard.bool(forKey: "hasSeenOnboarding"))")
        print("   hasAcceptedDisclaimer: \(UserDefaults.standard.bool(forKey: "hasAcceptedDisclaimer"))")
        
        showRestartAlert()
    }

    private func showRestartAlert() {
        guard let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
              let window = windowScene.windows.first else {
            return
        }
        
        let alert = UIAlertController(
            title: "–°–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω",
            message: "–î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            preferredStyle: .alert
        )
        
        alert.addAction(UIAlertAction(title: "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", style: .default) { _ in
            exit(0)
        })
        
        alert.addAction(UIAlertAction(title: "–ü–æ–∑–∂–µ", style: .cancel))
        
        if let rootViewController = window.rootViewController {
            rootViewController.present(alert, animated: true)
        }
    }
    #endif
    
    private func clearWebViewData() {
        print("üì± ProfileView: –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ WebView...")
        
        // –û—á–∏—â–∞–µ–º –∫—É–∫–∏ WebView
        let dataStore = WKWebsiteDataStore.default()
        let dataTypes = WKWebsiteDataStore.allWebsiteDataTypes()
        
        dataStore.removeData(ofTypes: dataTypes, modifiedSince: Date(timeIntervalSince1970: 0)) {
            print("üì± ProfileView: WebView –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        }
        
        // –û—á–∏—â–∞–µ–º –∫—É–∫–∏ HTTP
        if let url = URL(string: "https://w-psycholog.com") {
            let cookies = HTTPCookieStorage.shared.cookies(for: url) ?? []
            for cookie in cookies {
                HTTPCookieStorage.shared.deleteCookie(cookie)
                print("üì± ProfileView: –£–¥–∞–ª–µ–Ω –∫—É–∫–∏: \(cookie.name)")
            }
            print("üì± ProfileView: HTTP –∫—É–∫–∏ –æ—á–∏—â–µ–Ω—ã (\(cookies.count) —à—Ç.)")
        }
    }

    // MARK: - Logout Function
    func logout() {
        print("üì± ProfileView: –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
        
        DispatchQueue.main.async {
            // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            KeychainManager.shared.clearCredentials()
            UserDefaults.standard.removeObject(forKey: "userProfile")
            UserDefaults.standard.removeObject(forKey: "lastUsername")
            UserDefaults.standard.removeObject(forKey: "localSessionBalance")
            
            // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏–∏
            self.sessionManager.clearLocalData()
            
            // –û—á–∏—â–∞–µ–º WebView –¥–∞–Ω–Ω—ã–µ
            self.clearWebViewData()
            
            // –ö–†–ò–¢–ò–ß–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ
            NotificationCenter.default.post(name: .userDidLogout, object: nil)
            
            print("üì± ProfileView: –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        }
    }
}

// MARK: - Supporting Views (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)

struct FixedStatisticCard: View {
    let title: String
    let value: String
    let icon: String
    let color: Color
    
    var body: some View {
        VStack(spacing: 8) {
            Image(systemName: icon)
                .font(.title2)
                .foregroundColor(color)
            
            Text(value)
                .font(.title3)
                .fontWeight(.bold)
            
            Text(title)
                .font(.caption)
                .foregroundColor(.secondary)
                .multilineTextAlignment(.center)
        }
        .frame(maxWidth: .infinity)
        .padding()
        .background(Color(UIColor.secondarySystemBackground))
        .cornerRadius(12)
    }
}

struct FixedSessionCard: View {
    let session: ProfileSession
    
    var body: some View {
        HStack(spacing: 16) {
            session.status.image
            
            VStack(alignment: .leading, spacing: 4) {
                Text("–°–µ—Å—Å–∏—è #\(session.id)")
                    .font(.headline)
                    .foregroundColor(.primary)
                
                Text(session.date, format: .dateTime.day().month().year())
                    .font(.subheadline)
                    .foregroundColor(.secondary)
                
                Text(session.status.description)
                    .font(.caption)
                    .foregroundColor(session.status.color)
                    .padding(.top, 2)
            }
            
            Spacer()
            
            Image(systemName: "chevron.right")
                .foregroundColor(.secondary)
                .font(.caption)
        }
        .padding()
        .background(Color(UIColor.secondarySystemBackground))
        .cornerRadius(10)
    }
}

struct FixedLoadingView: View {
    var body: some View {
        VStack(spacing: 20) {
            ProgressView()
                .progressViewStyle(CircularProgressViewStyle(tint: Color(hex: "889E8C")))
                .scaleEffect(1.5)
            
            VStack(spacing: 8) {
                Text("–ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–π...")
                    .font(.headline)
                    .foregroundColor(.secondary)
            }
        }
        .frame(maxWidth: .infinity)
        .padding(.vertical, 40)
    }
}

struct FixedErrorView: View {
    let error: String
    let onRetry: () -> Void
    let onDebug: () -> Void
    
    var body: some View {
        VStack(spacing: 20) {
            Image(systemName: "exclamationmark.triangle.fill")
                .font(.system(size: 50))
                .foregroundColor(.orange)
            
            VStack(spacing: 12) {
                Text("–ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π")
                    .font(.headline)
                    .foregroundColor(.primary)
                
                Text(error)
                    .font(.body)
                    .foregroundColor(.secondary)
                    .multilineTextAlignment(.center)
            }
            
            VStack(spacing: 12) {
                Button("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É") {
                    onRetry()
                }
                .foregroundColor(.white)
                .frame(maxWidth: .infinity)
                .padding()
                .background(Color(hex: "889E8C"))
                .cornerRadius(12)
                
                #if DEBUG
                Button("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é") {
                    onDebug()
                }
                .foregroundColor(.orange)
                .padding(.horizontal, 16)
                .padding(.vertical, 8)
                .background(Color.orange.opacity(0.1))
                .cornerRadius(8)
                #endif
            }
        }
        .frame(maxWidth: .infinity)
        .padding()
        .background(Color(UIColor.secondarySystemBackground))
        .cornerRadius(12)
    }
}

struct FixedEmptyStateView: View {
    let onStartSession: () -> Void
    let onRefresh: () -> Void
    
    var body: some View {
        VStack(spacing: 24) {
            Image(systemName: "message.badge")
                .font(.system(size: 60))
                .foregroundColor(.secondary)
            
            VStack(spacing: 12) {
                Text("–ò—Å—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–π –ø—É—Å—Ç–∞")
                    .font(.headline)
                    .foregroundColor(.primary)
                
                Text("–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å AI-–ø—Å–∏—Ö–æ–ª–æ–≥–æ–º, –∏ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤")
                    .font(.body)
                    .foregroundColor(.secondary)
                    .multilineTextAlignment(.center)
            }
            
            VStack(spacing: 12) {
                Button("–ù–∞—á–∞—Ç—å –ø–µ—Ä–≤—É—é —Å–µ—Å—Å–∏—é") {
                    onStartSession()
                }
                .foregroundColor(.white)
                .frame(maxWidth: .infinity)
                .padding()
                .background(
                    LinearGradient(
                        gradient: Gradient(colors: [
                            Color(hex: "889E8C"),
                            Color(hex: "6B7F6F")
                        ]),
                        startPoint: .leading,
                        endPoint: .trailing
                    )
                )
                .cornerRadius(12)
                
                Button("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ") {
                    onRefresh()
                }
                .foregroundColor(Color(hex: "889E8C"))
                .font(.subheadline)
                .padding(.horizontal, 16)
                .padding(.vertical, 8)
                .background(Color(hex: "889E8C").opacity(0.1))
                .cornerRadius(8)
            }
        }
        .frame(maxWidth: .infinity)
        .padding()
        .background(Color(UIColor.secondarySystemBackground))
        .cornerRadius(12)
    }
}

struct AchievementCard: View {
    let title: String
    let description: String
    let icon: String
    let isUnlocked: Bool
    let color: Color
    
    var body: some View {
        VStack(spacing: 12) {
            ZStack {
                Circle()
                    .fill(isUnlocked ? color : Color.gray.opacity(0.3))
                    .frame(width: 60, height: 60)
                
                Image(systemName: icon)
                    .font(.title2)
                    .foregroundColor(isUnlocked ? .white : .gray)
            }
            
            VStack(spacing: 4) {
                Text(title)
                    .font(.headline)
                    .fontWeight(.semibold)
                    .foregroundColor(isUnlocked ? .primary : .secondary)
                
                Text(description)
                    .font(.caption)
                    .foregroundColor(.secondary)
                    .multilineTextAlignment(.center)
            }
            
            if !isUnlocked {
                Text("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ")
                    .font(.caption2)
                    .foregroundColor(.gray)
                    .padding(.horizontal, 8)
                    .padding(.vertical, 2)
                    .background(Color.gray.opacity(0.2))
                    .cornerRadius(8)
            }
        }
        .padding()
        .background(Color(UIColor.secondarySystemBackground))
        .cornerRadius(12)
        .opacity(isUnlocked ? 1.0 : 0.6)
    }
}
