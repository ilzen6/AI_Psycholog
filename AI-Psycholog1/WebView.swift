//
//  WebView.swift - –£–ü–†–û–©–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¥–ª—è WebRTC
//  AI_Psycholog
//
//  –§–û–ö–£–°: –¢–æ–ª—å–∫–æ –Ω–∞ WebRTC –∏ –º–µ–¥–∏–∞-—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è—Ö
//

import SwiftUI
import WebKit
import AVFoundation

struct WebView: UIViewRepresentable {
    let url: URL
    @ObservedObject var viewModel: WebViewModel
    
    func makeCoordinator() -> Coordinator {
        Coordinator(self)
    }
    
    func makeUIView(context: Context) -> WKWebView {
        let preferences = WKPreferences()
        preferences.javaScriptEnabled = true
        
        let configuration = WKWebViewConfiguration()
        configuration.preferences = preferences
        configuration.userContentController.add(context.coordinator, name: "iOS")
        
        // –ö–†–ò–¢–ò–ß–ù–û: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è WebRTC –∏ –º–µ–¥–∏–∞
        configuration.allowsInlineMediaPlayback = true
        configuration.mediaTypesRequiringUserActionForPlayback = []
        configuration.allowsAirPlayForMediaPlayback = true
        configuration.allowsPictureInPictureMediaPlayback = true
        
        // –†–∞–∑—Ä–µ—à–∞–µ–º JavaScript –ø–æ–ª–Ω–æ—Å—Ç—å—é
        configuration.defaultWebpagePreferences.allowsContentJavaScript = true
        
        // –û—á–∏—â–∞–µ–º –∫–µ—à
        let dataStore = WKWebsiteDataStore.default()
        let dataTypes = WKWebsiteDataStore.allWebsiteDataTypes()
        dataStore.removeData(ofTypes: dataTypes, modifiedSince: Date(timeIntervalSince1970: 0)) { }
        configuration.websiteDataStore = dataStore
        
        let webView = WKWebView(frame: .zero, configuration: configuration)
        webView.navigationDelegate = context.coordinator
        webView.uiDelegate = context.coordinator // –í–ê–ñ–ù–û –¥–ª—è –º–µ–¥–∏–∞-—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        webView.allowsBackForwardNavigationGestures = true
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        webView.scrollView.isScrollEnabled = true
        webView.scrollView.bounces = true
        webView.scrollView.showsHorizontalScrollIndicator = false
        webView.scrollView.showsVerticalScrollIndicator = true
        
        webView.isUserInteractionEnabled = true
        webView.scrollView.isUserInteractionEnabled = true
        
        // –û—Ç–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∑—É–º
        webView.scrollView.minimumZoomScale = 1.0
        webView.scrollView.maximumZoomScale = 1.0
        webView.scrollView.delegate = context.coordinator
        
        // –£–ü–†–û–©–ï–ù–ù–´–ô —Å–∫—Ä–∏–ø—Ç –¥–ª—è WebRTC
        let webrtcScript = """
        console.log('üé§ WebRTC support script loading...');
        
        // Viewport
        (function() {
            var meta = document.createElement('meta');
            meta.name = 'viewport';
            meta.content = 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no';
            var head = document.getElementsByTagName('head')[0];
            if (head) {
                var existing = head.querySelectorAll('meta[name="viewport"]');
                existing.forEach(function(tag) { tag.remove(); });
                head.insertBefore(meta, head.firstChild);
            }
        })();

        // –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏
        var style = document.createElement('style');
        style.innerHTML = `
            html, body { overflow-x: hidden !important; max-width: 100% !important; }
            * { max-width: 100% !important; box-sizing: border-box !important; }
            input, textarea, button, select { font-size: 16px !important; }
            video, audio { max-width: 100% !important; height: auto !important; }
        `;
        document.head.appendChild(style);

        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑—É–º, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ
        document.addEventListener('gesturestart', function(e) { e.preventDefault(); });
        document.addEventListener('gesturechange', function(e) { e.preventDefault(); });
        document.addEventListener('gestureend', function(e) { e.preventDefault(); });

        var lastTouchEnd = 0;
        document.addEventListener('touchend', function(e) {
            var now = Date.now();
            if (now - lastTouchEnd <= 300) {
                var target = e.target;
                if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || 
                    target.tagName === 'BUTTON' || target.tagName === 'A' ||
                    target.onclick || target.closest('button') || target.closest('a')) {
                    return; // –†–∞–∑—Ä–µ—à–∞–µ–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
                }
                e.preventDefault(); // –ë–ª–æ–∫–∏—Ä—É–µ–º –∑—É–º
            }
            lastTouchEnd = now;
        });

        // –û–°–ù–û–í–ù–û–ï: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º WebRTC –∑–∞–ø—Ä–æ—Å—ã
        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
            var originalGetUserMedia = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);
            navigator.mediaDevices.getUserMedia = function(constraints) {
                console.log('üé§ WebRTC getUserMedia called:', constraints);
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º iOS –æ –∑–∞–ø—Ä–æ—Å–µ –º–µ–¥–∏–∞
                if (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.iOS) {
                    window.webkit.messageHandlers.iOS.postMessage({
                        type: 'webrtcMediaRequest',
                        constraints: constraints
                    });
                }
                
                return originalGetUserMedia(constraints)
                    .then(function(stream) {
                        console.log('‚úÖ WebRTC stream obtained:', stream);
                        
                        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–∞
                        if (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.iOS) {
                            window.webkit.messageHandlers.iOS.postMessage({
                                type: 'webrtcStreamObtained',
                                streamId: stream.id
                            });
                        }
                        
                        return stream;
                    })
                    .catch(function(error) {
                        console.log('‚ùå WebRTC error:', error);
                        
                        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—à–∏–±–∫–µ
                        if (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.iOS) {
                            window.webkit.messageHandlers.iOS.postMessage({
                                type: 'webrtcError',
                                error: error.toString()
                            });
                        }
                        
                        throw error;
                    });
            };
        }

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞/–∑–≤—É–∫–∞
        document.addEventListener('click', function(e) {
            var target = e.target;
            var button = target.closest('button') || target.closest('[role="button"]');
            
            if (button) {
                var buttonText = (button.textContent || button.innerText || '').toLowerCase();
                var buttonClass = button.className || '';
                
                // –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ –∑–≤—É–∫–æ–º/–º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º
                if (buttonText.includes('mic') || buttonText.includes('–º–∏–∫—Ä–æ—Ñ–æ–Ω') ||
                    buttonText.includes('audio') || buttonText.includes('–∑–≤—É–∫') ||
                    buttonText.includes('call') || buttonText.includes('–∑–≤–æ–Ω–æ–∫') ||
                    buttonClass.includes('mic') || buttonClass.includes('audio') ||
                    buttonClass.includes('call')) {
                    
                    console.log('üé§ Audio/Mic button clicked:', buttonText, buttonClass);
                    
                    if (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.iOS) {
                        window.webkit.messageHandlers.iOS.postMessage({
                            type: 'audioButtonClicked',
                            text: buttonText,
                            className: buttonClass
                        });
                    }
                }
            }
        }, true);

        console.log('‚úÖ WebRTC support script loaded');
        """
        
        let userScript = WKUserScript(
            source: webrtcScript,
            injectionTime: .atDocumentStart,
            forMainFrameOnly: true
        )
        configuration.userContentController.addUserScript(userScript)
        
        return webView
    }
    
    func updateUIView(_ webView: WKWebView, context: Context) {
        if webView.url != url {
            let request = URLRequest(url: url)
            webView.load(request)
        }
        viewModel.setWebView(webView)
    }

    
    class Coordinator: NSObject, WKNavigationDelegate, WKScriptMessageHandler, UIScrollViewDelegate, WKUIDelegate {
        var parent: WebView
        
        init(_ parent: WebView) {
            self.parent = parent
            super.init()
            requestMicrophonePermission()
        }
        
        // –ö–†–ò–¢–ò–ß–ù–û: –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        private func requestMicrophonePermission() {
            AVAudioSession.sharedInstance().requestRecordPermission { granted in
                print("üé§ Microphone permission: \(granted)")
            }
        }
        
        // –ì–õ–ê–í–ù–û–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ WebRTC —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        func webView(_ webView: WKWebView, requestMediaCapturePermissionFor origin: WKSecurityOrigin, initiatedByFrame frame: WKFrameInfo, type: WKMediaCaptureType, decisionHandler: @escaping (WKPermissionDecision) -> Void) {
            
            print("üé§ WebRTC permission request for: \(origin.host), type: \(type.rawValue)")
            
            switch type {
            case .microphone:
                AVAudioSession.sharedInstance().requestRecordPermission { granted in
                    DispatchQueue.main.async {
                        print("üé§ Microphone access: \(granted)")
                        decisionHandler(granted ? .grant : .deny)
                    }
                }
            case .camera:
                AVCaptureDevice.requestAccess(for: .video) { granted in
                    DispatchQueue.main.async {
                        print("üìπ Camera access: \(granted)")
                        decisionHandler(granted ? .grant : .deny)
                    }
                }
            case .cameraAndMicrophone:
                AVCaptureDevice.requestAccess(for: .video) { videoGranted in
                    AVAudioSession.sharedInstance().requestRecordPermission { audioGranted in
                        DispatchQueue.main.async {
                            let granted = videoGranted && audioGranted
                            print("üé§üìπ Camera+Mic access: \(granted)")
                            decisionHandler(granted ? .grant : .deny)
                        }
                    }
                }
            @unknown default:
                decisionHandler(.deny)
            }
        }
        
        func userContentController(_ userContentController: WKUserContentController,
                                 didReceive message: WKScriptMessage) {
            guard let dict = message.body as? [String: Any],
                  let type = dict["type"] as? String else { return }
            
            print("üì± WebView message: \(type)")
            
            switch type {
            case "webrtcMediaRequest":
                print("üé§ WebRTC media requested: \(dict)")
            case "webrtcStreamObtained":
                print("‚úÖ WebRTC stream obtained: \(dict)")
            case "webrtcError":
                print("‚ùå WebRTC error: \(dict)")
                if let error = dict["error"] as? String {
                    showWebRTCError(error: error)
                }
            case "audioButtonClicked":
                print("üé§ Audio button clicked: \(dict)")
            default:
                DispatchQueue.main.async {
                    self.parent.viewModel.handleMessage(type: type, data: dict)
                }
            }
        }
        
        private func showWebRTCError(error: String) {
            DispatchQueue.main.async {
                print("üé§ WebRTC Error: \(error)")
                
                // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å alert –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if error.contains("NotAllowedError") || error.contains("Permission") {
                    self.showPermissionAlert()
                }
            }
        }
        
        private func showPermissionAlert() {
            guard let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
                  let window = windowScene.windows.first,
                  let rootViewController = window.rootViewController else {
                return
            }
            
            let alert = UIAlertController(
                title: "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω",
                message: "–î–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è —Å AI-–ø—Å–∏—Ö–æ–ª–æ–≥–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
                preferredStyle: .alert
            )
            
            alert.addAction(UIAlertAction(title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", style: .default) { _ in
                if let settingsUrl = URL(string: UIApplication.openSettingsURLString) {
                    UIApplication.shared.open(settingsUrl)
                }
            })
            
            alert.addAction(UIAlertAction(title: "–û—Ç–º–µ–Ω–∞", style: .cancel))
            
            var topController = rootViewController
            while let presentedController = topController.presentedViewController {
                topController = presentedController
            }
            
            topController.present(alert, animated: true)
        }
        
        // –ö–æ–Ω—Ç—Ä–æ–ª—å –∑—É–º–∞
        func scrollViewDidScroll(_ scrollView: UIScrollView) {
            if scrollView.contentOffset.x != 0 {
                scrollView.contentOffset = CGPoint(x: 0, y: scrollView.contentOffset.y)
            }
            if scrollView.zoomScale != 1.0 {
                scrollView.setZoomScale(1.0, animated: false)
            }
        }
        
        func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {
            print("‚úÖ WebView loaded: \(webView.url?.absoluteString ?? "unknown")")
            
            DispatchQueue.main.async {
                webView.scrollView.setZoomScale(1.0, animated: false)
            }
        }
        
        func webView(_ webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction, decisionHandler: @escaping (WKNavigationActionPolicy) -> Void) {
            
            guard let url = navigationAction.request.url else {
                decisionHandler(.allow)
                return
            }
            
            print("üîó Navigation: \(url.absoluteString)")
            decisionHandler(.allow)
        }
    }
}
