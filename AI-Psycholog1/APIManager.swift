//
//  APIManager.swift - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º
//  AI_Psycholog
//
//  –ò–°–ü–†–ê–í–õ–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê: –¢–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∞—Ä—Å–∏—Ç —Ñ–æ—Ä–º–∞—Ç {"content":[[5,"2025-07-04",3],[13,"2025-07-06",1]]}
//

import Foundation
import UIKit
import SwiftUI

class APIManager {
    static let shared = APIManager()
    
    // –ü–†–û–î–ê–ö–®–ù URL - —Ä–µ–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
    private let baseURL = "https://w-psycholog.com/API"
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞
    private let timeout: TimeInterval = 30.0
    private let maxRetries = 3
    
    private init() {
        setupProductionEnvironment()
    }
    
    private func setupProductionEnvironment() {
        URLSession.shared.configuration.timeoutIntervalForRequest = timeout
        URLSession.shared.configuration.timeoutIntervalForResource = timeout * 2
        
        print("üåê APIManager –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω —Å—Ä–µ–¥—ã: \(baseURL)")
    }
    
    enum APIError: Error, LocalizedError {
        case invalidURL
        case noData
        case decodingError
        case serverError(String)
        case networkError(String)
        case unauthorized
        
        var errorDescription: String? {
            switch self {
            case .invalidURL:
                return "–ù–µ–≤–µ—Ä–Ω—ã–π URL —Å–µ—Ä–≤–µ—Ä–∞"
            case .noData:
                return "–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ"
            case .decodingError:
                return "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞"
            case .serverError(let message):
                return message
            case .networkError(let message):
                return "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: \(message)"
            case .unauthorized:
                return "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
            }
        }
    }
    
    // MARK: - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–ü–†–û–î–ê–ö–®–ù)
    func login(username: String, password: String, completion: @escaping (Result<LoginResponse, Error>) -> Void) {
        guard let url = URL(string: "\(baseURL)/Account/Authorization") else {
            completion(.failure(APIError.invalidURL))
            return
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("AI-Psycholog iOS/1.0", forHTTPHeaderField: "User-Agent")
        request.timeoutInterval = timeout
        
        let body = [
            "login": username.trimmingCharacters(in: .whitespacesAndNewlines),
            "password": password
        ]
        
        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: body)
        } catch {
            completion(.failure(error))
            return
        }
        
        performRequest(request: request) { result in
            switch result {
            case .success(let (data, response)):
                if let httpResponse = response as? HTTPURLResponse {
                    switch httpResponse.statusCode {
                    case 200:
                        let cookies = HTTPCookie.cookies(
                            withResponseHeaderFields: httpResponse.allHeaderFields as! [String: String],
                            for: url
                        )
                        let token = cookies.first(where: { $0.name == "authToken" })?.value ?? ""
                        let id = cookies.first(where: { $0.name == "id" })?.value ?? ""
                        
                        HTTPCookieStorage.shared.setCookies(cookies, for: url, mainDocumentURL: nil)
                        
                        let loginResponse = LoginResponse(token: token, id: id)
                        completion(.success(loginResponse))
                        
                        print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \(username)")
                        
                    case 401:
                        completion(.failure(APIError.serverError("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")))
                    case 429:
                        completion(.failure(APIError.serverError("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")))
                    case 500...599:
                        completion(.failure(APIError.serverError("–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")))
                    default:
                        completion(.failure(APIError.serverError("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (\(httpResponse.statusCode))")))
                    }
                }
            case .failure(let error):
                completion(.failure(error))
            }
        }
    }
    
    // MARK: - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π
    func getSessions(completion: @escaping (Result<[SessionData], Error>) -> Void) {
        print("üîç APIManager: –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞...")
        
        guard let url = URL(string: "\(baseURL)/Session/History") else {
            completion(.failure(APIError.invalidURL))
            return
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.setValue("AI-Psycholog iOS/1.0", forHTTPHeaderField: "User-Agent")
        request.timeoutInterval = timeout
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫—É–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if let cookies = HTTPCookieStorage.shared.cookies(for: url) {
            let cookieHeader = HTTPCookie.requestHeaderFields(with: cookies)
            for (key, value) in cookieHeader {
                request.setValue(value, forHTTPHeaderField: key)
            }
            print("üç™ APIManager: –î–æ–±–∞–≤–ª–µ–Ω—ã –∫—É–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: \(cookies.count) —à—Ç.")
        } else {
            print("‚ö†Ô∏è APIManager: –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫—É–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        }
        
        performRequest(request: request) { result in
            switch result {
            case .success(let (data, response)):
                print("üîç APIManager: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                
                // –í—ã–≤–æ–¥–∏–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                if let responseString = String(data: data, encoding: .utf8) {
                    print("üì° RAW Response: \(responseString)")
                }
                
                if let httpResponse = response as? HTTPURLResponse {
                    print("üìä HTTP Status: \(httpResponse.statusCode)")
                    
                    switch httpResponse.statusCode {
                    case 200:
                        do {
                            let json = try JSONSerialization.jsonObject(with: data) as? [String: Any]
                            print("üìä Parsed JSON keys: \(json?.keys.joined(separator: ", ") ?? "none")")
                            
                            // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ {"content":[[5,"2025-07-04",3],[13,"2025-07-06",1]]}
                            var sessions: [SessionData] = []
                            
                            if let content = json?["content"] as? [[Any]] {
                                print("üîç –§–æ—Ä–º–∞—Ç: content –∫–∞–∫ –º–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤ (\(content.count) —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
                                sessions = self.parseCorrectSessionFormat(content)
                            } else {
                                print("üîç –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
                                sessions = []
                            }
                            
                            print("‚úÖ APIManager: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ \(sessions.count) —Å–µ—Å—Å–∏–π")
                            sessions.forEach { session in
                                print("üìä –°–µ—Å—Å–∏—è #\(session.id): \(session.date) - \(session.moodLevel.title)")
                            }
                            
                            completion(.success(sessions.sorted { $0.date > $1.date }))
                            
                        } catch {
                            print("‚ùå APIManager: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: \(error)")
                            completion(.failure(APIError.decodingError))
                        }
                        
                    case 401:
                        print("üîê APIManager: –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                        completion(.failure(APIError.unauthorized))
                        
                    case 404:
                        print("‚ÑπÔ∏è APIManager: –ò—Å—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (404)")
                        completion(.success([])) // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
                        
                    case 403:
                        print("üö´ APIManager: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403)")
                        completion(.failure(APIError.serverError("–î–æ—Å—Ç—É–ø –∫ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–π –∑–∞–ø—Ä–µ—â–µ–Ω")))
                        
                    default:
                        print("‚ùå APIManager: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π HTTP —Å—Ç–∞—Ç—É—Å: \(httpResponse.statusCode)")
                        completion(.failure(APIError.serverError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–π (\(httpResponse.statusCode))")))
                    }
                }
            case .failure(let error):
                print("‚ùå APIManager: –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Å—Å–∏–π: \(error)")
                completion(.failure(error))
            }
        }
    }
    
    // MARK: - –ü–†–ê–í–ò–õ–¨–ù–´–ô –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ [[5,"2025-07-04",3],[13,"2025-07-06",1]]
    private func parseCorrectSessionFormat(_ content: [[Any]]) -> [SessionData] {
        print("üîç –ü–∞—Ä—Å–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–µ—Å—Å–∏–π...")
        
        return content.compactMap { item -> SessionData? in
            guard item.count >= 3 else {
                print("‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: \(item.count)")
                return nil
            }
            
            // –ü–†–ê–í–ò–õ–¨–ù–ê–Ø —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: [id, date, status]
            let id = item[0] as? Int ?? 0
            let dateString = item[1] as? String ?? ""
            let status = item[2] as? Int ?? 1
            
            print("üîç –ü–∞—Ä—Å–∏–º —Å–µ—Å—Å–∏—é: id=\(id), date='\(dateString)', status=\(status)")
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "2025-07-04"
            guard let date = parseSimpleDateFormat(dateString) else {
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É: '\(dateString)'")
                return nil
            }
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º status –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
            let moodLevel = convertStatusToMood(status)
            
            let sessionNote = "–°–µ—Å—Å–∏—è —Å AI-–ø—Å–∏—Ö–æ–ª–æ–≥–æ–º –æ—Ç \(dateString)"
            
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞ —Å–µ—Å—Å–∏—è #\(id): \(date) - \(moodLevel.title)")
            
            return SessionData(
                id: id,
                date: date,
                moodLevel: moodLevel,
                note: sessionNote
            )
        }
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø–∞—Ä—Å–µ—Ä –¥–∞—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ "2025-07-04"
    private func parseSimpleDateFormat(_ dateString: String) -> Date? {
        let cleanDateString = dateString.trimmingCharacters(in: .whitespacesAndNewlines)
        guard !cleanDateString.isEmpty else {
            print("‚ùå –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞—Ç—ã")
            return nil
        }
        
        print("üîç –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É: '\(cleanDateString)'")
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ "2025-07-04"
        let formatters = [
            "yyyy-MM-dd",
            "yyyy-MM-dd HH:mm:ss",
            "yyyy-MM-dd'T'HH:mm:ss",
            "dd.MM.yyyy",
            "MM/dd/yyyy"
        ]
        
        for format in formatters {
            let formatter = DateFormatter()
            formatter.dateFormat = format
            formatter.timeZone = TimeZone(identifier: "Europe/Moscow")
            formatter.locale = Locale(identifier: "en_US_POSIX") // –í–ê–ñ–ù–û –¥–ª—è "yyyy-MM-dd"
            
            if let date = formatter.date(from: cleanDateString) {
                print("‚úÖ –î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º '\(format)': \(cleanDateString) -> \(date)")
                return date
            }
        }
        
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É —Å –ª—é–±—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º: '\(cleanDateString)'")
        return nil
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∞–π—Ç–∞: –ø–ª–æ—Ö–æ–µ=1, —Ö–æ—Ä–æ—à–µ–µ=3)
    private func convertStatusToMood(_ status: Int) -> MoodLevel {
        switch status {
        case 1:
            return .happy // –ò–°–ü–†–ê–í–õ–ï–ù–û: 1 = —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (—Å–æ–ª–Ω—ã—à–∫–æ –Ω–∞ —Å–∞–π—Ç–µ)
        case 3:
            return .sad   // –ò–°–ü–†–ê–í–õ–ï–ù–û: 3 = –ø–ª–æ—Ö–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (–¥–æ–∂–¥–∏–∫ –Ω–∞ —Å–∞–π—Ç–µ)
        default:
            return .neutral // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ
        }
    }
    
    // MARK: - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–ü–†–û–î–ê–ö–®–ù)
    func register(data: [String: String], completion: @escaping (Result<Void, Error>) -> Void) {
        guard let url = URL(string: "\(baseURL)/Account/Registration") else {
            completion(.failure(APIError.invalidURL))
            return
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("AI-Psycholog iOS/1.0", forHTTPHeaderField: "User-Agent")
        request.timeoutInterval = timeout
        
        var cleanData = data
        cleanData["login"] = data["login"]?.trimmingCharacters(in: .whitespacesAndNewlines)
        cleanData["email"] = data["email"]?.trimmingCharacters(in: .whitespacesAndNewlines)
        cleanData["phone"] = data["phone"]?.trimmingCharacters(in: .whitespacesAndNewlines)
        
        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: cleanData)
        } catch {
            completion(.failure(error))
            return
        }
        
        performRequest(request: request) { result in
            switch result {
            case .success(let (_, response)):
                if let httpResponse = response as? HTTPURLResponse {
                    switch httpResponse.statusCode {
                    case 201:
                        completion(.success(()))
                        print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: \(cleanData["login"] ?? "unknown")")
                    case 409:
                        completion(.failure(APIError.serverError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")))
                    case 422:
                        completion(.failure(APIError.serverError("–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —Å–µ—Ä–≤–µ—Ä–∞")))
                    case 400:
                        completion(.failure(APIError.serverError("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")))
                    default:
                        completion(.failure(APIError.serverError("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (\(httpResponse.statusCode))")))
                    }
                }
            case .failure(let error):
                completion(.failure(error))
            }
        }
    }
    
    // MARK: - –ü—Ä–æ—Ñ–∏–ª—å (–ü–†–û–î–ê–ö–®–ù)
    func getProfile(completion: @escaping (Result<UserProfile, Error>) -> Void) {
        guard let url = URL(string: "\(baseURL)/Account/About") else {
            completion(.failure(APIError.invalidURL))
            return
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.setValue("AI-Psycholog iOS/1.0", forHTTPHeaderField: "User-Agent")
        request.timeoutInterval = timeout
        
        performRequest(request: request) { result in
            switch result {
            case .success(let (data, response)):
                if let httpResponse = response as? HTTPURLResponse {
                    switch httpResponse.statusCode {
                    case 200:
                        do {
                            let json = try JSONSerialization.jsonObject(with: data) as? [String: Any]
                            if let content = json?["content"] as? [[Any]],
                               let firstUser = content.first {
                                
                                let profile = UserProfile(
                                    fullName: firstUser[1] as? String ?? "",
                                    email: firstUser[3] as? String ?? "",
                                    phone: firstUser[2] as? String ?? "",
                                    sessionBalance: firstUser[4] as? Int ?? 0,
                                    avatarURL: firstUser[5] as? String
                                )
                                completion(.success(profile))
                                print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å: \(profile.fullName)")
                            } else {
                                completion(.failure(APIError.decodingError))
                            }
                        } catch {
                            completion(.failure(APIError.decodingError))
                        }
                    case 401:
                        completion(.failure(APIError.unauthorized))
                    default:
                        completion(.failure(APIError.serverError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è")))
                    }
                }
            case .failure(let error):
                completion(.failure(error))
            }
        }
    }
    
    // MARK: - –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ (–ü–†–û–î–ê–ö–®–ù)
    func createSession(completion: @escaping (Result<SessionInfo, Error>) -> Void) {
        guard let url = URL(string: "\(baseURL)/Session") else {
            completion(.failure(APIError.invalidURL))
            return
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "PATCH"
        request.setValue("AI-Psycholog iOS/1.0", forHTTPHeaderField: "User-Agent")
        request.timeoutInterval = timeout
        
        performRequest(request: request) { result in
            switch result {
            case .success(let (data, response)):
                if let httpResponse = response as? HTTPURLResponse {
                    switch httpResponse.statusCode {
                    case 200, 201:
                        do {
                            let json = try JSONSerialization.jsonObject(with: data) as? [String: Any]
                            let sessionInfo = SessionInfo(
                                id: json?["id"] as? Int,
                                isNew: (json?["isNew"] as? Int) == 1
                            )
                            completion(.success(sessionInfo))
                            print("‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞/–ø–æ–ª—É—á–µ–Ω–∞: ID=\(sessionInfo.id ?? 0), –Ω–æ–≤–∞—è=\(sessionInfo.isNew)")
                        } catch {
                            completion(.failure(APIError.decodingError))
                        }
                    case 401:
                        completion(.failure(APIError.unauthorized))
                    default:
                        completion(.failure(APIError.serverError("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏")))
                    }
                }
            case .failure(let error):
                completion(.failure(error))
            }
        }
    }
    
    // MARK: - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (–ü–†–û–î–ê–ö–®–ù)
    func addMoodRecord(moodLevel: MoodLevel, note: String, completion: @escaping (Result<Void, Error>) -> Void) {
        guard let url = URL(string: "\(baseURL)/Mood/Add") else {
            completion(.failure(APIError.invalidURL))
            return
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("AI-Psycholog iOS/1.0", forHTTPHeaderField: "User-Agent")
        request.timeoutInterval = timeout
        
        let body: [String: Any] = [
            "mood": moodLevel.rawValue,
            "score": moodLevel.score,
            "note": note.trimmingCharacters(in: .whitespacesAndNewlines),
            "timestamp": ISO8601DateFormatter().string(from: Date())
        ]
        
        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: body)
        } catch {
            completion(.failure(error))
            return
        }
        
        performRequest(request: request) { result in
            switch result {
            case .success(let (_, response)):
                if let httpResponse = response as? HTTPURLResponse {
                    switch httpResponse.statusCode {
                    case 200, 201:
                        completion(.success(()))
                        print("‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: \(moodLevel.title)")
                    case 401:
                        completion(.failure(APIError.unauthorized))
                    case 400:
                        completion(.failure(APIError.serverError("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è")))
                    default:
                        completion(.failure(APIError.serverError("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è")))
                    }
                }
            case .failure(let error):
                completion(.failure(error))
            }
        }
    }
    
    // MARK: - –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –≤–µ–± (–ü–†–û–î–ê–ö–®–ù)
    func confirmPayment(packageId: Int, completion: @escaping (Result<Void, Error>) -> Void) {
        guard let url = URL(string: "\(baseURL)/Session") else {
            completion(.failure(APIError.invalidURL))
            return
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("AI-Psycholog iOS/1.0", forHTTPHeaderField: "User-Agent")
        request.timeoutInterval = timeout
        
        let body = ["index": packageId]
        
        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: body)
            print("üí≥ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–∞–∫–µ—Ç–∞ #\(packageId)")
        } catch {
            completion(.failure(error))
            return
        }
        
        performRequest(request: request) { result in
            switch result {
            case .success(let (data, response)):
                if let httpResponse = response as? HTTPURLResponse {
                    switch httpResponse.statusCode {
                    case 202:
                        // –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
                        if let json = try? JSONSerialization.jsonObject(with: data) as? [String: Any],
                           let paymentURL = json["url"] as? String {
                            print("üîó –ü–æ–ª—É—á–µ–Ω URL –¥–ª—è –æ–ø–ª–∞—Ç—ã: \(paymentURL)")
                            // –û—Ç–∫—Ä—ã–≤–∞–µ–º URL –æ–ø–ª–∞—Ç—ã –≤ Safari
                            if let url = URL(string: paymentURL) {
                                DispatchQueue.main.async {
                                    UIApplication.shared.open(url)
                                }
                            }
                        }
                        completion(.success(()))
                        
                    case 200:
                        print("‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω")
                        completion(.success(()))
                        
                    case 401:
                        completion(.failure(APIError.unauthorized))
                        
                    case 400:
                        completion(.failure(APIError.serverError("–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–∫–µ—Ç–∞")))
                        
                    case 403:
                        completion(.failure(APIError.serverError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")))
                        
                    case 404:
                        completion(.failure(APIError.serverError("–ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")))
                        
                    default:
                        completion(.failure(APIError.serverError("–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ (\(httpResponse.statusCode))")))
                    }
                }
            case .failure(let error):
                completion(.failure(error))
            }
        }
    }
    
    // MARK: - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (–ü–†–û–î–ê–ö–®–ù)
    func getMoodStatistics(completion: @escaping (Result<MoodStatistics, Error>) -> Void) {
        guard let url = URL(string: "\(baseURL)/Mood/Statistics") else {
            completion(.failure(APIError.invalidURL))
            return
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.setValue("AI-Psycholog iOS/1.0", forHTTPHeaderField: "User-Agent")
        request.timeoutInterval = timeout
        
        performRequest(request: request) { result in
            switch result {
            case .success(let (data, response)):
                if let httpResponse = response as? HTTPURLResponse {
                    switch httpResponse.statusCode {
                    case 200:
                        do {
                            let json = try JSONSerialization.jsonObject(with: data) as? [String: Any]
                            
                            let statistics = MoodStatistics(
                                totalSessions: json?["totalSessions"] as? Int ?? 0,
                                averageScore: json?["averageScore"] as? Double ?? 0.0,
                                streakDays: json?["streakDays"] as? Int ?? 0,
                                sessionsThisMonth: json?["sessionsThisMonth"] as? Int ?? 0
                            )
                            
                            completion(.success(statistics))
                            print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π")
                        } catch {
                            completion(.failure(APIError.decodingError))
                        }
                        
                    case 401:
                        completion(.failure(APIError.unauthorized))
                        
                    case 404:
                        // –ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ - —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é
                        let emptyStats = MoodStatistics(totalSessions: 0, averageScore: 0.0, streakDays: 0, sessionsThisMonth: 0)
                        completion(.success(emptyStats))
                        
                    default:
                        completion(.failure(APIError.serverError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")))
                    }
                }
            case .failure(let error):
                completion(.failure(error))
            }
        }
    }
    
    // MARK: - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    private func performRequest(request: URLRequest, completion: @escaping (Result<(Data, URLResponse), Error>) -> Void) {
        URLSession.shared.dataTask(with: request) { data, response, error in
            DispatchQueue.main.async {
                if let error = error {
                    if error.localizedDescription.contains("timed out") {
                        completion(.failure(APIError.networkError("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞")))
                    } else if error.localizedDescription.contains("Internet connection") {
                        completion(.failure(APIError.networkError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")))
                    } else {
                        completion(.failure(APIError.networkError(error.localizedDescription)))
                    }
                    return
                }
                
                guard let data = data, let response = response else {
                    completion(.failure(APIError.noData))
                    return
                }
                
                completion(.success((data, response)))
            }
        }.resume()
    }
}

// MARK: - Response Models

struct LoginResponse {
    let token: String
    let id: String
}

struct SessionInfo {
    let id: Int?
    let isNew: Bool
}

struct MoodStatistics {
    let totalSessions: Int
    let averageScore: Double
    let streakDays: Int
    let sessionsThisMonth: Int
}
